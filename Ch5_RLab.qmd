---
title: "RLab Ch 5: Resampling Methods"
format: html
---


# The Validation Set Approach

We explore the use of the validation set approach in order to estimate the
test error rates that result from fitting various linear models on the Auto data set. Before we begin, we use the \texttt{set.seed()} function in order to set a seed for R â€™s random number generator, so that you will obtain precisely the same results as those shown below. It is generally a good idea
to set a random seed when performing an analysis such as cross-validation
that contains an element of randomness, so that the results obtained can
be reproduced precisely at a later time.
We begin by using the \texttt{sample()} function to split the set of observations
into two halves, by selecting a random subset of 196 observations out of
the original 392 observations. We refer to these observations as the training
set.
```{r}
library(ISLR)
set.seed (1)
train = sample(x = 392, size = 196)
# equivalent:
# train = sample(x = 1:392, size = 196)
```
(Here we use a shortcut in the sample command; see \texttt{?sample} for details.) We then use the \texttt{subset} option in \texttt{lm()} to fit a linear regression using only the observations corresponding to the training set.

```{r}
lm.fit=lm(mpg ~ horsepower, data=Auto, subset=train)
```
We now use the \texttt{predict()} function to estimate the response for all 392 observations, and we use the \texttt{mean()} function to calculate the MSE of the 196 observations in the validation set. Note that the \texttt{-train} index below selects only the observations that are *not* in the training set.
```{r}
attach(Auto)
mean((mpg-predict(lm.fit, Auto))[-train]^2)
```
Therefore, the estimated test MSE for the linear regression fit is 26.14. We can use the \texttt{poly()} function to estimate the test error for the quadratic and cubic regressions.
```{r}
lm.fit2 = lm(mpg ~ poly(horsepower,2), data=Auto, subset=train)
mean((mpg-predict(lm.fit2,Auto))[-train]^2)
lm.fit3=lm(mpg ~ poly(horsepower,3), data=Auto, subset=train)
mean((mpg-predict(lm.fit3,Auto))[-train]^2)
```
These error rates are 19.82 and 19.78, respectively. If we choose a different training set instead, then we will obtain somewhat different errors on the validation set.
```{r}
set.seed(2)
train=sample(392,196)
lm.fit=lm(mpg~horsepower,subset=train)
mean((mpg-predict(lm.fit,Auto))[-train]^2)
lm.fit2=lm(mpg~poly(horsepower,2),data=Auto,subset=train)
mean((mpg-predict(lm.fit2,Auto))[-train]^2)
lm.fit3=lm(mpg~poly(horsepower,3),data=Auto,subset=train)
mean((mpg-predict(lm.fit3,Auto))[-train]^2)
```
Using this split of the observations into a training set and a validation set, we find that the validation set error rates for the models with linear, quadratic, and cubic terms are 23.30, 18.90, and 19.26, respectively. These results are consistent with our previous findings: a model that predicts \texttt{mpg} using a quadratic function of \texttt{horsepower} performs better than a model that involves only a linear function of \texttt{horsepower}, and there is little evidence in favor of a model that uses a cubic function of \texttt{horsepower}. By contrast, the former split would suggest a cubic function of \texttt{horsepower}. 


# Leave-One-Out Cross-Validation

The LOOCV estimate can be automatically computed for any generalized linear model using the \texttt{glm()} and \texttt{cv.glm()} functions. In the lab for Chapter 4, we used the \texttt{glm()} function to perform logistic regression by passing in the \texttt{family="binomial"} argument. But if we use \texttt{glm()} to fit a model without passing in the \texttt{family} argument, then it performs **linear regression**, just like the \texttt{lm()} function. So for instance,
```{r}
glm.fit=glm(mpg~horsepower,data=Auto)
coef(glm.fit)
```
and
```{r}
lm.fit=lm(mpg~horsepower,data=Auto)
coef(lm.fit)
```
yield identical linear regression models. In this lab, we will perform linear regression using the \texttt{glm()} function rather than the \texttt{lm()} function because the former can be used together with \texttt{cv.glm()}.The \texttt{cv.glm()} function is part of the \texttt{boot} library.
```{r}
library(boot)
glm.fit=glm(mpg~horsepower,data=Auto)
cv.err=cv.glm(Auto,glm.fit)
cv.err$delta
```
The \texttt{cv.glm()} function produces a list with several components. The two numbers in the \texttt{delta} vector contain the cross-validation results. In this case the numbers are identical (up to two decimal places). The first value is computed by the LOOCV statistic given in Equation (5.1) of our textbook. The second value returned in delta provides a bias adjustment which becomes more visible for $K<n$ fold cross validation. Below, we discuss a situation in which the two numbers differ. 


Our cross-validation estimate for the test error is approximately 24.23.
We can repeat this procedure for increasingly complex polynomial fits. To automate the process, we use the \texttt{for()} function to initiate a \textit{for loop} which iteratively fits polynomial regressions for polynomials of order $i=1$ to $i=5$, computes the associated cross-validation error, and stores it in the $i$th element of the vector \texttt{cv.error}. We begin by initializing the vector. This command will likely take some time (maybe even minutes) to run.
```{r}
cv.error=rep(x = 0, times = 5)
for (i in 1:5){
        glm.fit=glm(mpg~poly(horsepower,i),data=Auto)
        cv.error[i]=cv.glm(Auto,glm.fit)$delta[1]
}

plot(cv.error, type="b")
```

As in Figure 5.4 of our textbook, we see a sharp drop in the estimated test MSE between the linear and quadratic fits, but then no clear improvement from using higher-order polynomials.


# K-Fold Cross-Validation

The \texttt{cv.glm()} function can also be used to implement $K$-fold CV. Below we use $K=5$, a common choice for $K$, on the \texttt{Auto} data set. We once again set a random seed and initialize a vector in which we will store the CV errors corresponding to the polynomial fits of orders one to ten.
```{r}
set.seed(17)
cv.error.5         = rep(0,5)
cv.error.5.bias_adj= rep(0,5)
for (i in 1:5){
        glm.fit=glm(mpg~poly(horsepower,i),data=Auto)
        cv.error.5[i]=cv.glm(Auto,glm.fit,K=5)$delta[1]
        cv.error.5.bias_adj[i]=cv.glm(Auto,glm.fit,K=5)$delta[2]
}
plot(cv.error.5, type="b", ylim = range(cv.error.5, cv.error.5.bias_adj))
lines(y=cv.error.5.bias_adj, x=1:5, "b", lty=2)
```


# The Bootstrap

We illustrate the use of the bootstrap in the simple example of Section 5.2 of our textbook, as well as on an example involving estimating the accuracy of the linear regression model on the \texttt{Auto} data set.


## Estimating the Accuracy of a Statistic of Interest

One of the great advantages of the bootstrap approach is that it can be applied in almost all situations. No complicated mathematical calculations are required. Performing a bootstrap analysis in \texttt{R} entails only two steps. First, we must create a function that computes the statistic of interest. Second, we use the \texttt{boot()} function, which is part of the \texttt{boot} library, to perform the bootstrap by repeatedly sampling observations from the dataset with replacement. The \texttt{Portfolio} data set in the \texttt{ISLR} package is described in Section 5.2 of our textbook. To illustrate the use of the bootstrap on this data, we must first create a function, \texttt{alpha.fn()}, which takes as input the $(X,Y)$ data as well as a vector indicating which observations should be used to estimate $\alpha$. The function then outputs the estimate for $\alpha$ based on the selected observations.
```{r}
alpha.fn=function(data,index){
        X=data$X[index]
        Y=data$Y[index]
        return((var(Y)-cov(X,Y))/(var(X)+var(Y)-2*cov(X,Y)))
}
```
This function \textit{returns}, or outputs, an estimate for $\alpha$ based on applying Equation (5.7) from our textbook to the observations indexed by the argument \texttt{index}. For instance, the following command tells \texttt{R} to estimate $\alpha$ using all 100 observations.
```{r}
# ? Portfolio # Portfolio data of the ISLR R-package
alpha.fn(data = Portfolio, index = 1:100)
```
The next command uses the \texttt{sample()} function to randomly select 100 observations from the range 1 to 100, with replacement. This is equivalent to constructing a new bootstrap data set and recomputing $\hat\alpha$ based on the new data set.
```{r}
set.seed(1)
alpha.fn(Portfolio,sample(100,100,replace=T))
```
We can implement a bootstrap analysis by performing this command many times, recording all of the corresponding estimates for $\alpha$, and computing the resulting standard deviation. However, the \texttt{boot()} function automates this approach. Below we produce $R=1,000$ bootstrap estimates for $\alpha$.
```{r}
# ? boot
set.seed(1)
boot(Portfolio,alpha.fn,R=1000)
```
The final output shows that using the original data, $\hat\alpha=0.5758$, and that the bootstrap estimate for $SE(\hat\alpha)$ is 0.09.


## Estimating the Accuracy of a Linear Regression Model

The bootstrap approach can be used to assess the variability of the coefficient estimates and predictions from a statistical learning method. Here we use the bootstrap approach in order to assess the variability of the estimates for $\beta_0$ and $\beta_1$, the intercept and slope terms for the linear regression model that uses \texttt{horsepower} to predict \texttt{mpg} in the \texttt{Auto} data set. We will compare the estimates obtained using the bootstrap to those obtained using the formulas for $SE(\hat\beta_0)$ and $SE(\hat\beta_1)$ described in Section 3.1.2 of our textbook. 
We first create a simple function, \texttt{boot.fn()}, which takes in the \texttt{Auto} dataset as well as a set of indices for the observations, and returns the intercept and slope estimates for the linear regression model. We then apply this function to the full set of 392 observations in order to compute the estimates of $\beta_0$ and $\beta_1$ on the entire data set using the usual linear regression coefficient estimate formulas from Chapter 3 of our textbook. Note that we do not need the \texttt{\{}and \texttt{\}} at the beginning and end of the function because it is only one line long.
```{r}
boot.fn=function(data,index)
        return(coef(lm(mpg~horsepower,data=data,subset=index)))
boot.fn(Auto,1:392)
```
The \texttt{boot.fn()} function can also be used in order to create bootstrap estimates for the intercept and slope terms by randomly sampling from among the observations with replacement. Here we give two examples.
```{r}
set.seed(1)
boot.fn(Auto,sample(392,392,replace=T))
boot.fn(Auto,sample(392,392,replace=T))
```
Next, we use the \texttt{boot()} function to compute the standard errors of 1,000 bootstrap estimates for the intercept and slope terms.
```{r}
boot(Auto,boot.fn,1000)
```
This indicates that the bootstrap estimate for $SE(\hat\beta_0)$ is 0.8, and that the bootstrap estimate for $SE(\hat\beta_1)$ is 0.007. As discussed in Section 3.1.2 of our textbook, standard formulas can be used to compute the standard errors for the regression coefficients in a linear model. These can be obtained using the \texttt{summary()} function.
```{r}
summary(lm(mpg~horsepower,data=Auto))$coef
```
The standard error estimates for $\hat\beta_0$ and $\hat\beta_1$ obtained using the formulas from Section 3.1.2 of our textbook are 0.7 for the intercept and 0.006 for the slope. Interestingly, these are somewhat different from the estimates obtained using the bootstrap. Does this indicate a problem with the bootstrap? In fact, it suggests the opposite. Recall that the standard formulas given in Equation (3.8) on page 66 of our textbook rely on certain assumptions. For example, they depend on the unknown parameter $\sigma^2$, the noise variance.  We then estimate $\sigma^2$ using the Residual Sum of Squares (RSS). Remember, however, that there is a non-linear relationship in the data; see Figure 3.8 on page 91 of our textbook.  Since we do not consider this in our model, the residuals from a linear fit will be inflated, and so will $\hat\sigma^2$


Secondly, the standard formulas assume (somewhat unrealistically) that the predictors $X_i$ are fixed, and all the variability comes from the variation in the errors terms $\epsilon_i$. The bootstrap approach does not rely on any of these assumptions, and so it is likely giving a more accurate estimate of the standard errors of $\hat\beta_0$ and $\hat\beta_1$ than is the \texttt{summary()} function. 


Below we compute the bootstrap standard error estimates and the standard linear regression estimates that result from fitting the quadratic model to the data. Since this model provides a good fit to the data (Figure 3.8 of our textbook), there is now a better correspondence between the bootstrap estimates and the standard estimates of $SE(\hat\beta_0)$, $SE(\hat\beta_1)$ and $SE(\hat\beta_2)$. 
```{r}
boot.fn=function(data,index)
        coefficients(lm(mpg~horsepower+I(horsepower^2),data=data,subset=index))
set.seed(1)
boot(Auto,boot.fn,1000)
summary(lm(mpg~horsepower+I(horsepower^2),data=Auto))$coef
```