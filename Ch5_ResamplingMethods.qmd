# Resampling Methods

## Lecture Notes

**Resampling methods** involve repeatedly drawing samples from a *training data set* and refitting a model of interest on each of these samples. The different estimation results across resamples can be used, for instance, to estimate the variability of a linear regression fit. 


In the following, we consider the resampling methods:

* Cross-Validation and
* Bootstrap 


## (Ch. 5.1) Cross-Validation {-}

In this section, we instead consider a class of methods that estimate the
test error rate by holding out a subset of the training observations from the fitting process, and then applying the statistical learning method to those held out observations.


### (Ch. 5.1.1) Validation Set Approach {-}

The validation set approach randomly divides the available set of observations into two parts: 

* a *training set* and 
* a *validation set* (or hold-out set)

The model is fit on the training set, and the fitted model is used to predict the responses for the observations in the validation set. 


![](images/Fig_5_1.png)


#### Illustration {-}

Reconsider the `Auto` data set. In Chapter 3, we found that a model that predicts `mpg` using `horsepower` and `horsepower`$^2$ predicts better than a model that uses only the linear term. But maybe a cubic or a higher order polynomial regression model predicts even better? The validation set approach can be used to select the degree $p$ of the polynomial
$$
\texttt{mpg}=\beta_0 + \sum_{j=1}^p\beta_j \texttt{horsepower}^j + \epsilon
$$


**Step 1:** Randomly split the total data set into a training set and a validation set
$$
\begin{align*}
(x_i,y_i)\quad & i\in\mathcal{I}_{Train}\quad\text{with}n_{Train}=|\mathcal{I}_{Train}| \\
(x_i,y_i)\quad & i\in\mathcal{I}_{Test}\quad\text{with}n_{Test}=|\mathcal{I}_{Test}|
\end{align*}
$$
Code for splitting data randomly into training and validation sets:
```{r}
library("ISLR2")
data("Auto")

n        <- nrow(Auto)    # Sample size
n_Train  <- 200           # Sample size of training set 
n_Valid  <- n - n_Train   # Sample size of test/validation set 

## Index-Sets for selecting the training and validation sets
set.seed(1234) # set seed for reproducible training and validation sets
I_Train  <- sample(x = 1:n, size = n_Train, replace = FALSE)
I_Valid  <- c(1:n)[-I_Train]

## Trainingsdaten 
Auto_Train_df <- Auto[I_Train, ]
## Validierungsdaten 
Auto_Valid_df <- Auto[I_Valid, ]
```


**Step 2:** Estimation of the polynomial regression model, e.g., for $p=2$ using the training set:

```{r}
p            <- 2
Train_polreg <- lm(mpg ~ poly(horsepower, degree = p, raw=TRUE), 
                   data = Auto_Train_df)
```

**Step 3:** Validation of the polynomial regression model by computing the test mean squared (prediction) error using the validation set:
$$
\operatorname{MSE}_{test}^{Validation-Set-Approach}(p)=\frac{1}{n_{Test}}\sum_{i\in\mathcal{I}_{Test}}(y_i - \hat{y}_i)^2,
$$
where $\hat{f}$ in $\hat{y}_i=\hat{f}(x_i)$ is computed from the training data with sample size $n_{Train}<n,$ and evaluated at the test data $x_i,$ $i\in\mathcal{I}_{Test},$ with sample size $n_{Test}<n.$ 

```{r}
y_fit_Valid   <- predict(Train_polreg, newdata = Auto_Valid_df)
RSS_Valid     <- sum((Auto_Valid_df$mpg - y_fit_Valid)^2)
MSE           <- RSS_Valid / n_Valid
```

Repeating Steps 1-3 for a series of polynomial degrees $p=1,\dots,10$ 

```{r}
#| label: fig-VA1
#| fig-cap: Validation error estimates for a single split into training and validation data sets. This result suggests that $p=9$ minimizes the test MSE.
p_max         <- 10
MSE           <- numeric(p_max)
for(p in 1:p_max){
  ## Step 1
  Train_polreg <- lm(mpg ~ poly(horsepower, degree = p, raw=TRUE), 
                     data = Auto_Train_df)
  ## Step 2
  y_fit_Valid   <- predict(Train_polreg, newdata = Auto_Valid_df)
  RSS_Valid     <- sum( (Auto_Valid_df$mpg - y_fit_Valid)^2 )
  MSE[p]        <- RSS_Valid / n_Valid
}

plot(x = 1:p_max, y = MSE, type = "b", 
     col = "black", bg = "black", pch = 21,  
     xlab = "Degree of Polynomial", ylab = "MSE")
points(y = MSE[which.min(MSE)], 
       x = c(1:p_max)[which.min(MSE)], 
       col = "red", bg = "red", pch = 21)     
```


@fig-VA1 shows the test MSE values based on **one** random split of the dataset. The result that $p=9$ minimizes the test MSE, however, may depend on the random split. Different random splits may lead to different model selection (choices of $p$). 

The following code repeats the above computations for multiple random splits of the dataset into training and validation sets:
```{r}
#| label: fig-VA2
#| fig-cap: Validation error estimates for ten different random splits into training and validation data sets. The polynomial degrees that minimize the test MSE strongly vary across the different random splits.
## R = 10 random splits
R        <- 10
## Container for the MSE results
MSE      <- matrix(NA, R, p_max)

for(r in 1:R){
## Index sets for training and validation sets
I_Train  <- sample(x = 1:n, size = n_Train, replace = FALSE)
I_Valid  <- c(1:n)[-I_Train]

## Training set 
Auto_Train_df <- Auto[I_Train, ]
## Validation set
Auto_Valid_df <- Auto[I_Valid, ]

for(p in 1:p_max){
  ## Step 1
  Train_polreg <- lm(mpg ~ poly(horsepower, degree = p, raw = TRUE), 
                     data = Auto_Train_df)
  ## Step 2
  y_fit_Valid   <- predict(Train_polreg, newdata = Auto_Valid_df)
  RSS_Valid     <- sum( (Auto_Valid_df$mpg - y_fit_Valid)^2 )
  MSE[r,p]      <- RSS_Valid / n_Valid
}
}

matplot(y = t(MSE), type="b", ylab="MSE", xlab="Degree of Polynomial", 
        pch=21, col="black", bg="black", main="")
for(r in 1:R){
  points(y = MSE[r,][which.min(MSE[r,])], 
       x = c(1:p_max)[which.min(MSE[r,])], 
       col = "red", bg = "red", pch = 21)
}
```


@fig-VA2 shows that the validation set approach can be highly variable. The selected polynomial degrees (minimal test MSE) strongly varies across the different random splits and thus depend on the data included in the test and validation sets. 

A further serious problem with the validation set approach is that the evaluated predictions $\hat{y}_i=\hat{f}(x_i)$ are based on estimates $\hat{f}$ using a training set sample size $n_{Train}$ that is typically considerably smaller than the actual sample size $n.$ 

This leads to **increased test MSE values** which do not reflect the actual test MSE values under the total sample size $n>n_{Train}.$
$$
n_{Train}<n\quad\text{and}\quad n_{Valid}<n.
$$ 

Leave-One-Out and $k$-fold *Cross-validation* are refinements of the validation set approach that addresses these issues. 

### (Ch. 5.1.2) Leave-One-Out Cross-Validation (LOOCV) {-}

Like the validation set approach, LOOCV involves splitting the set of validation observations into two parts. 

However, instead of creating two subsets of comparable size, a **single** observation
$$
(x_i,y_i)
$$
is used for the validation set, and the remaining observations 
$$
\{(x_1,y_1),\dots,(x_{i-1},y_{i-1}),(x_{i+1},y_{i+1}),\dots,(x_{n},y_{n})\}
$$
are used for the training set. 

* Sample size of training set: $n-1$
* Sample size of test set: $1$

The estimate for the test MSE is thus
$$
\operatorname{MSE}_i = \left(y_i - \hat{y}_i\right)^2,
$$
which is an (approximately) unbiased estimate for the test MSE, although a poor estimate with a high variance as it is based on only one observation in the test set.

Repeating this leave-one-out splitting approach for each $i=1,\dots,n,$ produces $n$ many estimates of the test MSE:
$$
\operatorname{MSE}_1, \operatorname{MSE}_2,\dots,\operatorname{MSE}_n
$$

The LOOCV estimate is then formed by the average of the $n$ MSE estimates:
$$
\operatorname{CV}_{n} = \frac{1}{n} \sum_{i=1}^n\operatorname{MSE}_i.
$$

Figure 5.3 shows schematically the leave-one-out data splitting approach. 

![](images/Fig_5_3.png)


## `R`-Lab: Resampling Methods

In this lab, we explore the resampling techniques covered in this chapter. Some of the commands in this lab may take a while to run on your computer.

### The Validation Set Approach

We explore the use of the validation set approach in order to estimate the test error rates that result from fitting various linear models on the `Auto` data set.

Before we begin, we use the `set.seed()` function in order to set a  for `R`'s random number generator, so that the reader of this book will
obtain precisely the same results as those shown below. It is generally
a good idea to set a random seed when performing an analysis such as cross-validation that contains an
element of randomness, so that the results obtained can be reproduced precisely at a later time.

We begin by using the
`sample()` function to split the set of observations into two halves, by selecting a random subset of $196$ observations out of the original $392$ observations. We  refer
to these observations as the training set.

```{r chunk1}
library(ISLR2)
set.seed(1)
train <- sample(392, 196)
```

(Here we use a shortcut in the sample command; see `?sample` for details.)
We then use the `subset` option in `lm()` to fit a linear regression using only the observations corresponding to the training set.

```{r chunk2}
lm.fit <- lm(mpg ~ horsepower, 
             data   = Auto, 
             subset = train)
```

We now  use
 the `predict()` function to estimate the response for all $392$ observations,  and
 we  use
  the `mean()` function to calculate the MSE of the $196$ observations in the validation set. Note that the `-train` index below selects  only the observations that are not in the training set.

```{r chunk3}
attach(Auto)
mean((mpg - predict(lm.fit, Auto))[-train]^2)
```

Therefore, the estimated test MSE for the linear regression fit is $23.27$. We can use the `poly()` function to estimate the test error for the quadratic and cubic regressions.

```{r chunk4}
lm.fit2 <- lm(mpg ~ poly(horsepower, 2), 
             data   = Auto, 
             subset = train)

## Test MSE 
mean((mpg - predict(lm.fit2, Auto))[-train]^2)


lm.fit3 <- lm(mpg ~ poly(horsepower, 3), 
             data   = Auto, 
             subset = train)
## Test MSE             
mean((mpg - predict(lm.fit3, Auto))[-train]^2)
```

These error rates are $18.72$ and $18.79$, respectively.
If we choose a different training set instead, then we will obtain somewhat different errors on the validation set.

```{r chunk5}
set.seed(2)
train <- sample(392, 196)
lm.fit <- lm(mpg ~ horsepower, subset = train)
mean((mpg - predict(lm.fit, Auto))[-train]^2)
lm.fit2 <- lm(mpg ~ poly(horsepower, 2), data = Auto, 
    subset = train)
mean((mpg - predict(lm.fit2, Auto))[-train]^2)
lm.fit3 <- lm(mpg ~ poly(horsepower, 3), data = Auto, 
    subset = train)
mean((mpg - predict(lm.fit3, Auto))[-train]^2)
```

Using this split of the observations into a training set and a validation set,
we find that the validation set error rates for the models with linear, quadratic, and cubic terms are $25.73$, $20.43$, and $20.39$, respectively.

These results are consistent with our previous findings: a model that predicts `mpg` using a quadratic function of `horsepower` performs better than a model that involves only a linear function of `horsepower`, and there is little evidence in favor of a model that uses a cubic function of `horsepower`.

### Leave-One-Out Cross-Validation

The LOOCV estimate can be automatically computed for any generalized linear model   using the `glm()` and `cv.glm()` functions.  In the lab for Chapter 4, we used the `glm()` function to perform logistic regression by passing in  the `family = "binomial"` argument.
 But if we use `glm()` to fit a model without passing in the `family` argument, then it  performs linear regression, just like the `lm()` function.
So for instance,

```{r chunk6}
glm.fit <- glm(mpg ~ horsepower, data = Auto)
coef(glm.fit)
```

and

```{r chunk7}
lm.fit <- lm(mpg ~ horsepower, data = Auto)
coef(lm.fit)
```

 yield identical linear regression models. In this lab, we will  perform linear regression using
 the `glm()` function rather than the `lm()` function because the former can be used together with
`cv.glm()`. The `cv.glm()` function is part of the `boot` library.

```{r chunk8}
library(boot)
glm.fit <- glm(mpg ~ horsepower, data = Auto)
cv.err <- cv.glm(Auto, glm.fit)
cv.err$delta
```

The `cv.glm()` function produces a list with several components.  The two numbers in the `delta` vector contain the cross-validation results. In this case the numbers are identical (up to two decimal places) and correspond to the LOOCV statistic given in ( 5.1). Below, we discuss a situation in which the two numbers differ. Our cross-validation estimate for the test error is approximately $24.23$.

We can repeat this procedure for increasingly complex polynomial fits.
 To automate the process, we use the  `for()` function to initiate a  which iteratively fits polynomial regressions for polynomials of order $i=1$ to $i=10$, computes the associated cross-validation error, and stores it in the $i$th element of the vector `cv.error`.
 We begin by initializing the vector. 

```{r chunk9}
cv.error <- rep(0, 10)
for (i in 1:10) {
  glm.fit <- glm(mpg ~ poly(horsepower, i), data = Auto)
  cv.error[i] <- cv.glm(Auto, glm.fit)$delta[1]
}
cv.error
```

As in Figure 5.4, we see a sharp drop in the estimated test MSE between the linear and quadratic fits, but then no clear improvement from using higher-order polynomials.

### $k$-Fold Cross-Validation

The `cv.glm()` function can also be used to implement $k$-fold CV. Below we use $k=10$, a common choice for $k$, on the `Auto` data set.
We once again set a random seed and initialize a vector in which we will store the CV errors corresponding to the polynomial fits of orders one to ten.

```{r chunk10}
set.seed(17)
cv.error.10 <- rep(0, 10)
for (i in 1:10) {
  glm.fit <- glm(mpg ~ poly(horsepower, i), data = Auto)
  cv.error.10[i] <- cv.glm(Auto, glm.fit, K = 10)$delta[1]
}
cv.error.10
```

Notice that the computation time is shorter than that of LOOCV.
(In principle, the computation time for LOOCV for a least squares linear model should be faster than for $k$-fold CV, due to the availability
of the formula ( 5.2) for LOOCV; however, unfortunately the `cv.glm()` function does not make use of this formula.)
We still see little evidence that using cubic or higher-order polynomial terms leads to lower test error than simply using a quadratic fit.

We saw in Section 5.3.2 that the two numbers associated with `delta` are essentially the same when LOOCV is performed.
When we instead perform $k$-fold CV, then the two numbers associated with `delta` differ slightly. The first is the standard $k$-fold CV estimate,
as in ( 5.3). The second is a bias-corrected version. On this data set, the two estimates are very similar to each other.

### The Bootstrap


We illustrate the use of the bootstrap in the simple example of Section 5.2, as well as on an example involving estimating the
accuracy of the linear regression model on the `Auto` data set.

\subsubsection{Estimating the Accuracy of a Statistic of Interest}

One of the great advantages of the bootstrap approach is that it can be
applied in almost all situations. No complicated mathematical calculations
are required. Performing a bootstrap analysis in `R` entails only two
steps. First, we must create a function that computes the statistic of
interest. Second, we use the `boot()` function, which is part of the `boot` library, to perform the bootstrap by repeatedly
sampling observations from the data set with replacement.

The `Portfolio` data set in the `ISLR2` package is simulated data of $100$ pairs of returns, generated in the fashion described in Section 5.2.
To illustrate the use of the bootstrap on this data, we must first
create a function, `alpha.fn()`, which takes as input the $(X,Y)$ data
as well as a vector indicating which observations should be used to
estimate $\alpha$. The function then outputs the estimate for $\alpha$
based on the selected observations.

```{r chunk11}
alpha.fn <- function(data, index) {
  X <- data$X[index]
  Y <- data$Y[index]
  (var(Y) - cov(X, Y)) / (var(X) + var(Y) - 2 * cov(X, Y))
}
```

This function *returns*, or outputs, an  estimate for $\alpha$ based on applying ( 5.7) to the observations indexed by the argument `index`.
For instance, the following command tells `R` to estimate $\alpha$ using
all $100$ observations.

```{r chunk12}
alpha.fn(Portfolio, 1:100)
```

The next command  uses the `sample()` function to randomly select
$100$ observations from the range $1$ to $100$, with replacement. This is equivalent
to constructing a new bootstrap data set and recomputing $\hat{\alpha}$
based on the new data set.

```{r chunk13}
set.seed(7)
alpha.fn(Portfolio, sample(100, 100, replace = T))
```

We can implement a bootstrap analysis by performing this command many times, recording all of
the corresponding estimates for $\alpha$, and computing the resulting
standard deviation.
However, the `boot()` function automates this approach. Below we produce $R=1,000$ bootstrap estimates for $\alpha$.


```{r chunk14}
boot(Portfolio, alpha.fn, R = 1000)
```


The final output shows that using the original data, $\hat{\alpha}=0.5758$,
and that the bootstrap estimate for ${\rm SE}(\hat{\alpha})$ is $0.0897$.

\subsubsection{Estimating the Accuracy of a Linear Regression Model}

The bootstrap approach can be used  to assess the
variability of the coefficient estimates and predictions from a statistical learning method. Here we use the bootstrap approach in order to assess the variability of
the estimates for $\beta_0$ and $\beta_1$, the intercept and slope terms for the linear regression model
that uses  `horsepower` to predict `mpg` in the `Auto` data set. We will compare the estimates obtained using the bootstrap to those obtained using the formulas
for ${\rm SE}(\hat{\beta}_0)$ and ${\rm SE}(\hat{\beta}_1)$ described
in Section 3.1.2.

We first create a simple function, `boot.fn()`, which takes in the
`Auto` data set as well as a set of indices for the observations, and
returns the intercept and slope estimates for the linear regression model. We then apply this function
to the full set of $392$ observations in order to compute the estimates of $\beta_0$ and $\beta_1$ on the entire data set using the usual linear regression coefficient estimate
formulas from Chapter 3. Note that we do not need the `{` and `}` at the beginning and end of the function because it is only one line long.

```{r chunk15}
boot.fn <- function(data, index)
  coef(lm(mpg ~ horsepower, data = data, subset = index))
boot.fn(Auto, 1:392)
```

 The `boot.fn()` function can also be used in order to create
 bootstrap estimates for the intercept and slope terms by randomly sampling from among the observations with replacement. Here we give two examples.

```{r chunk16}
set.seed(1)
boot.fn(Auto, sample(392, 392, replace = T))
boot.fn(Auto, sample(392, 392, replace = T))
```

Next, we use the `boot()` function to compute the standard errors of 1,000 bootstrap estimates for the intercept and slope terms.

```{r chunk17}
boot(Auto, boot.fn, 1000)
```

This indicates that the bootstrap estimate for ${\rm SE}(\hat{\beta}_0)$ is $0.84$, and that the bootstrap estimate for ${\rm SE}(\hat{\beta}_1)$ is $0.0073$.
As discussed in Section 3.1.2, standard formulas can be used to compute the standard errors for the regression coefficients in a linear model. These can be obtained using the  `summary()` function.

```{r chunk18}
summary(lm(mpg ~ horsepower, data = Auto))$coef
```


The standard error estimates for $\hat{\beta}_0$ and
$\hat{\beta}_1$ obtained using the formulas from
Section 3.1.2 are $0.717$ for the intercept and $0.0064$
for the slope. Interestingly, these are somewhat different from the
estimates obtained using the bootstrap.  Does this indicate a problem
with the bootstrap? In fact, it suggests the opposite.  Recall that
the standard formulas given in Equation 3.8 on page66 rely on certain assumptions. For example, they depend
on the unknown parameter $\sigma^2$, the noise variance. We then estimate $\sigma^2$
using the RSS. Now although the formulas for the standard errors do not rely on the linear model
being correct, the estimate for $\sigma^2$ does.
We see in
Figure 3.8 on page91 that there is a non-linear relationship in
the data, and so the residuals from a linear fit will be inflated, and so will $\hat{\sigma}^2$.
Secondly, the standard formulas assume (somewhat unrealistically) that the $x_i$ are fixed, and all the variability comes from the variation in the errors $\epsilon_i$.
 The bootstrap approach does not rely on any of these assumptions, and so it is
likely giving a more accurate estimate of the standard errors of
$\hat{\beta}_0$ and $\hat{\beta}_1$ than is the `summary()`
function.

Below we compute the bootstrap standard error estimates and the standard
linear regression estimates that result from fitting the quadratic model to the data. Since this model provides a good fit to the data (Figure 3.8), there is now a better correspondence between the bootstrap estimates and the standard estimates of ${\rm SE}(\hat{\beta}_0)$, ${\rm SE}(\hat{\beta}_1)$ and ${\rm SE}(\hat{\beta}_2)$.

```{r chunk19}
boot.fn <- function(data, index)
  coef(
      lm(mpg ~ horsepower + I(horsepower^2), 
        data = data, subset = index)
    )
set.seed(1)
boot(Auto, boot.fn, 1000)
summary(
    lm(mpg ~ horsepower + I(horsepower^2), data = Auto)
  )$coef
```


## Exercises

Prepare the following exercises of Chapter 5 in our course textbook `ISLR`: 

- Exercise 3
- Exercise 4
- Exercise 5
- Exercise 6
- Exercise 8

<!-- {{< include Ch5_Solutions.qmd >}} -->