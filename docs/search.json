[
  {
    "objectID": "Ch2_Exercises.html",
    "href": "Ch2_Exercises.html",
    "title": "2  Exercise 7:",
    "section": "",
    "text": "The table below provides a training data set containing six observations, three predictors, and one qualitative response variable. Suppose we wish to use this data set to make a prediction for \\(Y\\) when \\(X_1 = X_2 = X_3 = 0\\) using K-nearest neighbors.\n7. a) Compute the Euclidean distance between each observation and the test point, \\(X_1 = X_2 = X_3 = 0\\).\nAnswer:\n7. b) What is your prediction with \\(K = 1\\)? Why?\nAnswer:\nClosest 1 neighbor is obs5 and thus, our prediction is Green because Green is the \\(Y\\) value associated to obs5.\n7. c) What is your prediction with \\(K = 3\\)? Why?\nAnswer:\nClosest 3 neighbors are obs5, obs6, obs2 and thus, our prediction is Red because it is the \\(Y\\) value associated to obs2 and obs6 (majority rule).\n7. d) If the Bayes decision boundary in this problem is highly nonlinear, then would we expect the best value for \\(K\\) to be large or small? Why?\nAnswer:\nA large value of K means that the \\(Y\\)-values from a large neighborhood are contributing to the prediction at one chosen \\(X\\)-point. This requires that the neighborhood consists of relatively similar \\(Y\\)-values. However, in the case of a highly nonlinear decision boundary, the neighborhoods of similar \\(Y\\)-values become generally small. Therefore, also \\(K\\) must be chosen relatively small so that we can capture more of the non-linear decision boundary."
  },
  {
    "objectID": "Ch2_RLab.html",
    "href": "Ch2_RLab.html",
    "title": "1  Introduction to R",
    "section": "",
    "text": "This tutorial aims to serve as an introduction to the software package R. Other very good and much more exhaustive tutorials and useful reference-cards can be found at the following links:\nSome other tutorials:\nWhy R?"
  },
  {
    "objectID": "Ch2_RLab.html#short-glossary",
    "href": "Ch2_RLab.html#short-glossary",
    "title": "1  Introduction to R",
    "section": "1.1 Short Glossary",
    "text": "1.1 Short Glossary\nLets start the tutorial with a (very) short glossary:\n\nConsole: The thing with the > sign at the beginning.\nScript file: An ordinary text file with suffix .R. For instance, yourFavoritFileName.R.\nWorking directory: The file-directory you are working in. Useful commands: with getwd() you get the location of your current working directory and setwd() allows you to set a new location for it.\nWorkspace: This is a hidden file (stored in the working directory), where all objects you use (e.g., data, matrices, vectors, variables, functions, etc.) are stored. Useful commands: ls() shows all elements in our current workspace and rm(list=ls()) deletes all elements in our current workspace."
  },
  {
    "objectID": "Ch2_RLab.html#first-steps",
    "href": "Ch2_RLab.html#first-steps",
    "title": "1  Introduction to R",
    "section": "1.2 First Steps",
    "text": "1.2 First Steps\nA good idea is to use a script file such as yourFavoritFileName.R in order to store your R commands. You can send single lines or marked regions of your R-code to the console by pressing the keys STRG+ENTER.\nTo begin with baby steps, do some simple computations:\n\n2+2 # and all the others: *,/,-,^2,^3,... \n\n[1] 4\n\n\nNote: Everything that is written after the #-sign is ignored by R, which is very useful to comment your code.\nThe assignment operator <- or = will be your most often used tool. Here an example to create a scalar variable:\n\nx <- 4 \nx\n\n[1] 4\n\n4 -> x # possible but unusual\nx\n\n[1] 4\n\n\nNote: The R community loves the <- assignment operator, which is a very unusual syntax. Alternatively, you can use the more common = operator which is also used in languages like python or matlab.\nAnd now a more interesting object - a vector:\n\ny <- c(2,7,4,1)\ny\n\n[1] 2 7 4 1\n\n\nThe command ls() shows the total content of your current workspace, and the command rm(list=ls()) deletes all elements of your current workspace:\n\nls()\n\n[1] \"x\" \"y\"\n\nrm(list=ls())\nls()\n\ncharacter(0)\n\n\nNote: RStudio’s Environment pane also lists all the elements in your current workspace. That is, the command ls() becomes a bit obsolete when working with RStudio.\nLet’s try how we can compute with vectors and scalars in R.\n\nx <- 4\ny <- c(2,7,4,1)\n\nx*y # each element in the vector, y, is multiplied by the scalar, x.\n\n[1]  8 28 16  4\n\ny*y # this is a term by term product of the elements in y\n\n[1]  4 49 16  1\n\n\nPerforming vector multiplications as you might expect from your last math-course, e.g., an outer product: \\(y\\,y^\\top\\):\n\ny %*% t(y)\n\n     [,1] [,2] [,3] [,4]\n[1,]    4   14    8    2\n[2,]   14   49   28    7\n[3,]    8   28   16    4\n[4,]    2    7    4    1\n\n\nOr an inner product \\(y^\\top y\\):\n\nt(y) %*% y\n\n     [,1]\n[1,]   70\n\n\nNote: Sometimes, R’s treatment of vectors can be annoying. The product y %*% y is treated as the product t(y) %*% y.\nThe term-by-term execution as in the above example, y*y, is actually a central strength of R. We can conduct many operations vector-wisely:\n\ny^2\n\n[1]  4 49 16  1\n\nlog(y)\n\n[1] 0.6931472 1.9459101 1.3862944 0.0000000\n\nexp(y)\n\n[1]    7.389056 1096.633158   54.598150    2.718282\n\ny-mean(y)\n\n[1] -1.5  3.5  0.5 -2.5\n\n(y-mean(y))/sd(y) # standardization \n\n[1] -0.5669467  1.3228757  0.1889822 -0.9449112\n\n\nThis is a central characteristic of so called matrix based languages like R (or Matlab). Other programming languages often have to use loops instead:\n\nN <- length(y)\n1:N\n\ny.sq <- numeric(N)\ny.sq\n\nfor(i in 1:N){\n  y.sq[i] <- y[i]^2\n  if(i == N){\n    print(y.sq)\n  }\n}\n\nThe for()-loop is the most common loop. But there is also a while()-loop and a repeat()-loop. However, loops in R can be rather slow, therefore, try to avoid them!\n\nUseful commands to produce sequences of numbers:\n\n1:10\n-10:10\n?seq # Help for the seq()-function\nseq(from=1, to=100, by=7)\n\nUsing the sequence command 1:16, we can go for our first matrix:\n\n?matrix\nA <- matrix(data=1:16, nrow=4, ncol=4)\nA\n\n     [,1] [,2] [,3] [,4]\n[1,]    1    5    9   13\n[2,]    2    6   10   14\n[3,]    3    7   11   15\n[4,]    4    8   12   16\n\nA <- matrix(1:16, 4, 4)\n\nNote that a matrix has always two dimensions, but a vector has only one dimension:\n\ndim(A)    # Dimension of matrix A?\n\n[1] 4 4\n\ndim(y)    # dim() does not operate on vectors.\n\nNULL\n\nlength(y) # Length of vector y?\n\n[1] 4\n\n\nLets play a bit with the matrix A and the vector y. As we have seen in the loop above, the []-operator selects elements of vectors and matrices:\n\nA[,1]\nA[4,4]\ny[c(1,4)]\n\nThis can be done on a more logical basis, too. For example, if you want to know which elements in the first column of matrix A are strictly greater than 2:\n\nA[,1][A[,1]>2]\n\n[1] 3 4\n\n# Note that this give you a boolean vector:\nA[,1]>2\n\n[1] FALSE FALSE  TRUE  TRUE\n\n# And you can use it in a non-sense relation, too:\ny[A[,1]>2]\n\n[1] 4 1\n\n\nNote: Logical operations return so-called boolean objects, i.e., either a TRUE or a FALSE. For instance, if we ask R whether 1>2 we get the answer FALSE."
  },
  {
    "objectID": "Ch2_RLab.html#further-data-objects",
    "href": "Ch2_RLab.html#further-data-objects",
    "title": "1  Introduction to R",
    "section": "1.3 Further Data Objects",
    "text": "1.3 Further Data Objects\nBesides classical data objects such as scalars, vectors, and matrices there are three further data objects in R:\n\n1. The array: As a matrix but with more dimensions. Here is an example of a \\(2\\times 2\\times 2\\)-dimensional array:\n\nmyFirst.Array <- array(c(1:8), dim=c(2,2,2)) # Take a look at it!\n\n\n\n2. The list: In lists you can organize different kinds of data. E.g., consider the following example:\n\nmyFirst.List <- list(\"Some_Numbers\" = c(66, 76, 55, 12, 4, 66, 8, 99), \n                     \"Animals\"      = c(\"Rabbit\", \"Cat\", \"Elefant\"),\n                     \"My_Series\"    = c(30:1)) \n\nA very useful function to find specific values and entries within lists is the str()-function:\n\nstr(myFirst.List)\n\nList of 3\n $ Some_Numbers: num [1:8] 66 76 55 12 4 66 8 99\n $ Animals     : chr [1:3] \"Rabbit\" \"Cat\" \"Elefant\"\n $ My_Series   : int [1:30] 30 29 28 27 26 25 24 23 22 21 ...\n\n\n\n\n3. The data frame: A data.frame is a list-object but with some more formal restrictions (e.g., equal number of rows for all columns). As indicated by its name, a data.frame-object is designed to store data:\n\nmyFirst.Dataframe <- data.frame(\"Credit_Default\"   = c( 0, 0, 1, 0, 1, 1), \n                                \"Age\"              = c(35,41,55,36,44,26), \n                                \"Loan_in_1000_EUR\" = c(55,65,23,12,98,76)) \n# Take a look at it!"
  },
  {
    "objectID": "Ch2_RLab.html#simple-regression-analysis-using-r",
    "href": "Ch2_RLab.html#simple-regression-analysis-using-r",
    "title": "1  Introduction to R",
    "section": "1.4 Simple Regression Analysis using R",
    "text": "1.4 Simple Regression Analysis using R\nAlright, let’s do some statistics with real data. You can download the data HERE. Save it on your computer, at a place where you can find it, and give the path (e.g. \"C:\\textbackslash path\\textbackslash auto.data.csv\", which references to the data, to the file-argument of the function read.csv():\n\n# ATTENTION! YOU HAVE TO CHANGE \"\\\" TO \"/\":\nauto.data <- read.csv(file=\"C:/your_path/autodata.txt\", header=TRUE)\nhead(auto.data)\n\n\n\nIf you have problems to read the data into R, go on with these commands. (For this you need a working internet connection!):\n\n# install.packages(\"readr\")\nlibrary(\"readr\")\nauto.data <- suppressMessages(read_csv(file = \"https://cdn.rawgit.com/lidom/Teaching_Repo/bc692b56/autodata.csv\",col_names = TRUE))\n# head(auto.data)\n\n\n\nYou can select specific variables of the auto.data using the $-operator:\n\ngasolin.consumption      <- auto.data$MPG.city\ncar.weight               <- auto.data$Weight\n## Take a look at the first elements of these vectors:\nhead(cbind(gasolin.consumption,car.weight))\n\n     gasolin.consumption car.weight\n[1,]                  25       2705\n[2,]                  18       3560\n[3,]                  20       3375\n[4,]                  19       3405\n[5,]                  22       3640\n[6,]                  22       2880\n\n\n\n\nThis is how you can produce your first plot:\n\n## Plot the data:\nplot(y=gasolin.consumption, x=car.weight, \n     xlab=\"Car-Weight (US-Pounds)\", \n     ylab=\"Consumption (Miles/Gallon)\", \n     main=\"Buy Light-Weight Cars!\")\n\n\n\n\nFigure 1.1: Scatterplot of Gasoline consumption (mpg) vs. car weight.\n\n\n\n\n\n\nAs a first step, we might assume a simple kind of linear relationship between the variables gasolin.consumption and car.weight. Let us assume that the data was generated by the following simple regression model: \\[\ny_i=\\alpha+\\beta_1 x_i+\\varepsilon_i,\\quad i=1,\\dots,n\n\\] where \\(y_i\\) denotes the gasoline-consumption, \\(x_i\\) the weight of car \\(i\\), and \\(\\varepsilon_i\\) is a mean zero constant variance noise term. (This is clearly a non-sense model!)\nThe command lm() computes the estimates of this linear regression model. The command (in fact it’s a method) summary() computes further quantities of general interest from the object that was returned from the lm() function.\n\nlm.result   <- lm(gasolin.consumption~car.weight)\nlm.summary  <- summary(lm.result)\nlm.summary\n\n\nCall:\nlm(formula = gasolin.consumption ~ car.weight)\n\nResiduals:\n    Min      1Q  Median      3Q     Max \n-6.7946 -1.9711  0.0249  1.1855 13.8278 \n\nCoefficients:\n             Estimate Std. Error t value Pr(>|t|)    \n(Intercept) 47.048353   1.679912   28.01   <2e-16 ***\ncar.weight  -0.008032   0.000537  -14.96   <2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 3.038 on 91 degrees of freedom\nMultiple R-squared:  0.7109,    Adjusted R-squared:  0.7077 \nF-statistic: 223.8 on 1 and 91 DF,  p-value: < 2.2e-16\n\n\n\n\nOf course, we want to have a possibility to access all the quantities computed so far, e.g., in order to plot the results. This can be done as following:\n\n## Accessing the computed quantities\nnames(lm.summary) ## Alternatively: str(lm.summary)\n\n [1] \"call\"          \"terms\"         \"residuals\"     \"coefficients\" \n [5] \"aliased\"       \"sigma\"         \"df\"            \"r.squared\"    \n [9] \"adj.r.squared\" \"fstatistic\"    \"cov.unscaled\" \n\nalpha <- lm.summary$coefficients[1]\nbeta  <- lm.summary$coefficients[2]\n\n## Plot all:\nplot(y=gasolin.consumption, x=car.weight, \n     xlab=\"Car-Weight (US-Pounds)\", \n     ylab=\"Consumption (Miles/Gallon)\", \n     main=\"Buy light-weight Cars!\")\nabline(a=alpha, \n       b=beta, col=\"red\")\n\n\n\n\nScatterplot of Gasoline consumption (mpg) vs. car weight plus linear regression fit."
  },
  {
    "objectID": "Ch2_RLab.html#programming-in-r",
    "href": "Ch2_RLab.html#programming-in-r",
    "title": "1  Introduction to R",
    "section": "1.5 Programming in R",
    "text": "1.5 Programming in R\nLet’s write, i.e., program our own R-function for estimating linear regression models. In order to be able to validate our function, we start with simulating data for which we then know all true parameters.\nSimulating data is like being the “Data-God”: For instance, we generate realizations of the error term \\(\\varepsilon_i\\), i.e., something which we never observe in real data.\nLet us consider the following multiple regression model:\n\\[y_i=\\beta_1 +\\beta_2 x_{2i}+\\beta_3 x_{3i}+\\varepsilon_{i},\\quad i=1,\\dots,n,\\] where \\(\\varepsilon_{i}\\) is a heteroscedastic error term \\[\\varepsilon_{i}\\sim N(0,\\sigma_i^2),\\quad \\sigma_i=|x_{3i}|,\\]\nand where for all \\(i=1,\\dots,n=50\\):\n\n\\(x_{2i}\\sim N(10,1.5^2)\\)\n\\(x_{3i}\\) comes from a t-distribution with 5 degrees of freedom and non-centrality parameter 2\n\n\nset.seed(109) # Sets the \"seed\" of the random number generators:\nn   <- 50     # Number of observations\n\n## Generate two explanatory variables plus an intercept-variable:\nX.1 <- rep(1, n)                 # Intercept\nX.2 <- rnorm(n, mean=10, sd=1.5) # Draw realizations form a normal distr.\nX.3 <- rt(n, df=5, ncp=2)        # Draw realizations form a t-distr.\nX   <- cbind(X.1, X.2, X.3)      # Save as a Nx3-dimensional data matrix.\n\nOK, we have regressors, i.e., data that we also have in real data sets.\nNow we define the elements of the \\(\\beta\\)-vector. Be aware of the difference: In real data sets we do not know the true \\(\\beta\\)-vector, but try to estimate it. However, when simulating data, we determine (as “Data-Gods”) the true \\(\\beta\\)-vector and can compare our estimate \\(\\hat{\\beta}\\) with the true \\(\\beta\\):\n\n## Define the slope-coefficients\nbeta.vec  <- c(1,-5,5)\n\n\nWe still need to simulate realizations of the dependent variable \\(y_i\\). Remember that \\(y_i=\\beta_1 x_{1i}+\\beta_1 x_{2i}+\\beta_3 x_{3i}+\\varepsilon_{i}\\). That is, we only need realizations from the error terms \\(\\varepsilon_i\\) in order to compute the realizations from \\(y_i\\). This is how you can simulate realizations from the heteroscedastic error terms \\(\\varepsilon_i\\):\n\n## Generate realizations from the heteroscadastic error term\neps       <- rnorm(n, mean=0, sd=abs(X.3))\n\nTake a look at the heteroscedasticity in the error term:\n\nplot(y=eps, x=X.3, \n     main=\"Realizations of the \\nHeteroscedastic Error Term\")\n\n\n\n\nScatterplot of error term realizations (usually unknown) versus the predictor values of X.3.\n\n\n\n\nWith the (pseudo-random) realizations from \\(\\varepsilon_i\\), we can finally generate realizations from the dependent variable \\(y_i\\):\n\n## Dependent variable:\ny   <- X %*% beta.vec + eps\n\nLet’s take a look at the data:\n\nmydata    <- data.frame(\"Y\"=y, \"X.1\"=X.1, \"X.2\"=X.2, \"X.3\"=X.3)\npairs(mydata[,-2]) # The '-2' removes the intercept variable \"X.1\"\n\n\n\n\n\n\nOnce we have data, we can compute the OLS estimate of the true \\(\\beta\\) vector. Remember the formula: \\[\\hat{\\beta}=(X^\\top X)^{-1}X^\\top y\\] In R-Code this is: \\((X^\\top X)^{-1}=\\)solve(t(X) %*% X), i.e.:\n\n## Computation of the beta-Vector:\nbeta.hat <- solve(t(X) %*% X) %*% t(X) %*% y\nbeta.hat\n\n         [,1]\nX.1 -2.609634\nX.2 -4.692735\nX.3  5.078342\n\n\n\n\nWell done. Using the above lines of code we can easily program our own myOLSFun() function!\n\nmyOLSFun <- function(y, x, add.intercept=FALSE){\n  \n  ## Number of Observations:\n  n         <- length(y)\n  \n  ## Add an intercept to x:\n  if(add.intercept){\n    Intercept <- rep(1, n)\n    x         <- cbind(Intercept, x)\n  }\n  \n  ## Estimation of the slope-parameters:\n  beta.hat.vec <- solve(t(x) %*% x) %*% t(x) %*% y\n  \n  ## Return the result:\n  return(beta.hat.vec)\n}\n\n## Run the function:\nmyOLSFun(y=y, x=X)\n\n         [,1]\nX.1 -2.609634\nX.2 -4.692735\nX.3  5.078342\n\n\n\n\nCan you extend the function for the computation of the covariance matrix of the slope-estimates, several measures of fits (R\\(^2\\), adj.-R\\(^2\\), etc.), t-tests, …?"
  },
  {
    "objectID": "Ch2_RLab.html#r-packages",
    "href": "Ch2_RLab.html#r-packages",
    "title": "1  Introduction to R",
    "section": "1.6 R-packages",
    "text": "1.6 R-packages\nOne of the best features in R are its contributed packages. The list of all packages on CRAN is impressive! Take a look at it HERE\nFor instance, nice plots can be produced using the R-package is ggplot2. You can find an intro do this package HERE.\n\n# install.packages(\"ggplot2\")\nlibrary(\"ggplot2\")\n\nqplot(Sepal.Length, Petal.Length, data = iris, color = Species)\n\n\n\n\n\n\n\n\n\n\nOf course, ggplot2 concerns “only” plotting, but you’ll find R-packages for almost any statistical method out there."
  },
  {
    "objectID": "Ch2_RLab.html#tidyverse",
    "href": "Ch2_RLab.html#tidyverse",
    "title": "1  Introduction to R",
    "section": "1.7 Tidyverse",
    "text": "1.7 Tidyverse\nThe tidyverse package is a collection of packages that lets you import, manipulate, explore, visualize and model data in a harmonized and consistent way which helps you to be more productive.\nInstalling the tidyverse package:\n\ninstall.packages(\"tidyverse\")\n\nTo use the tidyverse package load it using the library() function:\n\nlibrary(tidyverse)\n\n── Attaching packages ─────────────────────────────────────── tidyverse 1.3.0 ──\n\n\n✔ tibble  3.1.7      ✔ dplyr   1.0.10\n✔ tidyr   1.1.2      ✔ stringr 1.4.0 \n✔ purrr   0.3.4      ✔ forcats 0.5.1 \n\n\n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\n\n\nChick Weight Data\nR comes with many datasets installed. We will use the ChickWeight dataset to learn (a little) about the tidyverse. The help system gives a basic summary of the experiment from which the data was collect:\n\n“The body weights of the chicks were measured at birth and every second day thereafter until day 20. They were also measured on day 21. There were four groups of chicks on different protein diets.”\n\nYou can get more information, including references by typing:\n\nhelp(\"ChickWeight\")\n\nThe Data:  There are 578 observations (rows) and 4 variables:\n\nChick – unique ID for each chick.\nDiet – one of four protein diets.\nTime – number of days since birth.\nweight – body weight of chick in grams.\n\nNote: weight has a lower case w (recall R is case sensitive).\nStore the data locally:\n\nChickWeight %>%\n  dplyr::select(Chick, Diet, Time, weight) %>% \n  dplyr::arrange(Chick, Diet, Time) %>% \n  write_csv(\"ChickWeight.csv\")\n\nFirst we will import the data from a file called ChickWeight.csv using the read_csv() function from the readr package (part of the tidyverse). The first thing to do, outside of R, is to open the file ChickWeight.csv to check what it contains and that it makes sense. Now we can import the data as follows:\n\nCW <- readr::read_csv(\"ChickWeight.csv\")\n\nRows: 578 Columns: 4\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\ndbl (4): Chick, Diet, Time, weight\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\nIf all goes well then the data is now stored in an R object called CW. If you get the following error message then you need to change the working directory to where the data is stored:\n\nError: ‘ChickWeight.csv’ does not exist in current working directory …\n\nChanging the working directory: In RStudio you can use the menu bar (“Session - Set Working Directory - Choose Directory…”). Alternatively, you can use the function setwd(). Last but not least, to avoid issues with brocken paths to files and data sets, use RStudios’ “Project” tools.\nLooking at the Dataset: To look at the data type just type the object (dataset) name:\n\nCW\n\n# A tibble: 578 × 4\n   Chick  Diet  Time weight\n   <dbl> <dbl> <dbl>  <dbl>\n 1    18     1     0     39\n 2    18     1     2     35\n 3    16     1     0     41\n 4    16     1     2     45\n 5    16     1     4     49\n 6    16     1     6     51\n 7    16     1     8     57\n 8    16     1    10     51\n 9    16     1    12     54\n10    15     1     0     41\n# … with 568 more rows\n\n\nIf there are too many variables then not all them may be printed. To overcome this issue we can use the glimpse() function which makes it possible to see every column in your dataset (called a “data frame” in R speak).\n\nglimpse(CW)\n\nRows: 578\nColumns: 4\n$ Chick  <dbl> 18, 18, 16, 16, 16, 16, 16, 16, 16, 15, 15, 15, 15, 15, 15, 15,…\n$ Diet   <dbl> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, …\n$ Time   <dbl> 0, 2, 0, 2, 4, 6, 8, 10, 12, 0, 2, 4, 6, 8, 10, 12, 14, 0, 2, 4…\n$ weight <dbl> 39, 35, 41, 45, 49, 51, 57, 51, 54, 41, 49, 56, 64, 68, 68, 67,…\n\n\nThe function View() allows for a spread-sheet type of view on the data:\n\nView(CW)\n\n\n1.7.1 Tidyverse: Plotting Basics\nTo visualize the chick weight data, we will use the ggplot2 package (part of the tidyverse). Our interest is in seeing how the weight changes over time for the chicks by diet. For the moment don’t worry too much about the details just try to build your own understanding and logic. To learn more try different things even if you get an error messages.\nLet’s plot the weight data (vertical axis) over time (horizontal axis). Generally, ggplot2 works in layers. The following codes generates an empty plot:\n\n# An empty plot\nggplot(CW, aes(Time, weight))  \n\n\n\n\nEmpty ggplot layer.\n\n\n\n\nTo the empty plot, one can add fuhrer layers:\n\n# Adding a scatter plot \nggplot(CW, aes(Time, weight)) + geom_point() \n\n\n\n\nAdding a scatter plot layer to the empty ggplot layer.\n\n\n\n\nAdd color for Diet. The graph above does not differentiate between the diets. Let’s use a different color for each diet.\n\n# Adding colour for diet\nggplot(CW,aes(Time,weight,colour=factor(Diet))) +\n  geom_point() \n\n\n\n\nAdding a further layer for shown the effect of the Diet.\n\n\n\n\nIt is difficult to conclude anything from this graph as the points are printed on top of one another (with diet 1 underneath and diet 4 at the top).\nTo improve the plot, it will be handy to store Diet and Time as a factor variables.\nFactor Variables: Before we continue, we have to make an important change to the CW dataset by making Diet and Time factor variables. This means that R will treat them as categorical variables (see the <fct> variables below) instead of continuous variables. It will simplify our coding. The next section will explain the mutate() function.\n\nCW <- mutate(CW, Diet = factor(Diet))\nCW <- mutate(CW, Time = factor(Time))\nglimpse(CW)\n\nRows: 578\nColumns: 4\n$ Chick  <dbl> 18, 18, 16, 16, 16, 16, 16, 16, 16, 15, 15, 15, 15, 15, 15, 15,…\n$ Diet   <fct> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, …\n$ Time   <fct> 0, 2, 0, 2, 4, 6, 8, 10, 12, 0, 2, 4, 6, 8, 10, 12, 14, 0, 2, 4…\n$ weight <dbl> 39, 35, 41, 45, 49, 51, 57, 51, 54, 41, 49, 56, 64, 68, 68, 67,…\n\n\nThe facet_wrap() function: To plot each diet separately in a grid using facet_wrap():\n\n# Adding jitter to the points\nggplot(CW, aes(Time, weight, colour=Diet)) +\n  geom_point() +\n  facet_wrap(~Diet) +\n  theme(legend.position = \"bottom\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nInterpretation: Diet 4 has the least variability but we can’t really say anything about the mean effect of each diet although diet 3 seems to have the highest.\nNext we will plot the mean changes over time for each diet using the stat_summary() function:\n\nggplot(CW, aes(Time, weight, \n               group=Diet, colour=Diet)) +\n  stat_summary(fun=\"mean\", geom=\"line\") \n\n\n\n\nInterpretation: We can see that diet 3 has the highest mean weight gains by the end of the experiment. However, we don’t have any information about the variation (uncertainty) in the data.\nTo see variation between the different diets we use geom_boxplot to plot a box-whisker plot. A note of caution is that the number of chicks per diet is relatively low to produce this plot.\n\nggplot(CW, aes(Time, weight, colour=Diet)) +\n  facet_wrap(~Diet) +\n  geom_boxplot() +\n  theme(legend.position = \"none\") +\n  ggtitle(\"Chick Weight over Time by Diet\")\n\n\n\n\nInterpretation: Diet 3 seems to have the highest “average” weight gain but it has more variation than diet 4 which is consistent with our findings so far.\nLet’s finish with a plot that you might include in a publication.\n\nggplot(CW, aes(Time, weight, group=Diet, \n                             colour=Diet)) +\n  facet_wrap(~Diet) +\n  geom_point() +\n  # geom_jitter() +\n  stat_summary(fun=\"mean\", geom=\"line\",\n               colour=\"black\") +\n  theme(legend.position = \"none\") +\n  ggtitle(\"Chick Weight over Time by Diet\") + \n  xlab(\"Time (days)\") +\n  ylab(\"Weight (grams)\")\n\n\n\n\n\n\n1.7.2 Tidyverse: Data Wrangling Basics\n\n\n\nIn this section we will learn how to wrangle (manipulate) datasets using the tidyverse package. Let’s start with the mutate(), select(), rename(), filter() and arrange() functions.\nmutate(): Adds a new variable (column) or modifies an existing one. We already used this above to create factor variables.\n\n# Added a column\nCWm1 <- mutate(CW, weightKg = weight/1000)\nCWm1\n\n# A tibble: 578 × 5\n  Chick Diet  Time  weight weightKg\n  <dbl> <fct> <fct>  <dbl>    <dbl>\n1    18 1     0         39    0.039\n2    18 1     2         35    0.035\n3    16 1     0         41    0.041\n# … with 575 more rows\n\n# Modify an existing column\nCWm2 <- mutate(CW, Diet = str_c(\"Diet \", Diet))\nCWm2\n\n# A tibble: 578 × 4\n  Chick Diet   Time  weight\n  <dbl> <chr>  <fct>  <dbl>\n1    18 Diet 1 0         39\n2    18 Diet 1 2         35\n3    16 Diet 1 0         41\n# … with 575 more rows\n\n\nselect(): Keeps, drops or reorders variables.\n\n# Drop the weight variable from CWm1 using minus\ndplyr::select(CWm1, -weight)\n\n# A tibble: 578 × 4\n  Chick Diet  Time  weightKg\n  <dbl> <fct> <fct>    <dbl>\n1    18 1     0        0.039\n2    18 1     2        0.035\n3    16 1     0        0.041\n# … with 575 more rows\n\n# Keep variables Time, Diet and weightKg\ndplyr::select(CWm1, Chick, Time, Diet, weightKg)\n\n# A tibble: 578 × 4\n  Chick Time  Diet  weightKg\n  <dbl> <fct> <fct>    <dbl>\n1    18 0     1        0.039\n2    18 2     1        0.035\n3    16 0     1        0.041\n# … with 575 more rows\n\n\nrename(): Renames variables whilst keeping all variables.\n\ndplyr::rename(CW, Group = Diet, Weight = weight)\n\n# A tibble: 578 × 4\n  Chick Group Time  Weight\n  <dbl> <fct> <fct>  <dbl>\n1    18 1     0         39\n2    18 1     2         35\n3    16 1     0         41\n# … with 575 more rows\n\n\nfilter(): Keeps or drops observations (rows).\n\ndplyr::filter(CW, Time==21 & weight>300)\n\n# A tibble: 8 × 4\n  Chick Diet  Time  weight\n  <dbl> <fct> <fct>  <dbl>\n1     7 1     21       305\n2    29 2     21       309\n3    21 2     21       331\n# … with 5 more rows\n\n\nFor comparing values in vectors use: < (less than), > (greater than), <= (less than and equal to), >= (greater than and equal to), == (equal to) and != (not equal to). These can be combined logically using & (and) and | (or).\narrange(): Changes the order of the observations.\n\ndplyr::arrange(CW, Chick, Time)\n\n# A tibble: 578 × 4\n  Chick Diet  Time  weight\n  <dbl> <fct> <fct>  <dbl>\n1     1 1     0         42\n2     1 1     2         51\n3     1 1     4         59\n# … with 575 more rows\n\ndplyr::arrange(CW, desc(weight))\n\n# A tibble: 578 × 4\n  Chick Diet  Time  weight\n  <dbl> <fct> <fct>  <dbl>\n1    35 3     21       373\n2    35 3     20       361\n3    34 3     21       341\n# … with 575 more rows\n\n\nWhat does the desc() do? Try using desc(Time).\n\n\n1.7.3 The pipe operator %>%\nIn reality you will end up doing multiple data wrangling steps that you want to save. The pipe operator %>% makes your code nice and readable:\n\nCW21 <- CW %>% \n  dplyr::filter(Time %in% c(0, 21)) %>% \n  dplyr::rename(Weight = weight) %>% \n  dplyr::mutate(Group = factor(str_c(\"Diet \", Diet))) %>% \n  dplyr::select(Chick, Group, Time, Weight) %>% \n  dplyr::arrange(Chick, Time) \nCW21\n\n# A tibble: 95 × 4\n  Chick Group  Time  Weight\n  <dbl> <fct>  <fct>  <dbl>\n1     1 Diet 1 0         42\n2     1 Diet 1 21       205\n3     2 Diet 1 0         40\n# … with 92 more rows\n\n\nHint: To understand the code above we should read the pipe operator %>% as “then”.\n\nCreate a new dataset (object) called CW21 using dataset CW then keep the data for days 0 and 21 then rename variable weight to Weight then create a variable called Group then keep variables Chick, Group, Time and Weight and then finally arrange the data by variables Chick and Time.\n\nThis is the same code:\n\nCW21 <- CW %>% \n  dplyr::filter(., Time %in% c(0, 21)) %>% \n  dplyr::rename(., Weight = weight) %>% \n  dplyr::mutate(., Group=factor(str_c(\"Diet \",Diet))) %>% \n  dplyr::select(., Chick, Group, Time, Weight) %>% \n  dplyr::arrange(., Chick, Time) \n\nThe pipe operator, %>%, replaces the dots (.) with whatever is returned from code preceding it. For example, the dot in filter(., Time %in% c(0, 21)) is replaced by CW. The output of the filter(...) then replaces the dot in rename(., Weight = weight) and so on. Think of it as a data assembly line with each function doing its thing and passing it to the next.\n\n\n1.7.4 The group_by() function\nFrom the data visualizations above we concluded that the diet 3 has the highest mean and diet 4 the least variation. In this section, we will quantify the effects of the diets using summmary statistics. We start by looking at the number of observations and the mean by diet and time.\n\nmnsdCW <- CW %>% \n  dplyr::group_by(Diet, Time) %>% \n  dplyr::summarise(N = n(), Mean = mean(weight)) %>% \n  dplyr::arrange(Diet, Time)\n\n`summarise()` has grouped output by 'Diet'. You can override using the\n`.groups` argument.\n\nmnsdCW\n\n# A tibble: 48 × 4\n# Groups:   Diet [4]\n  Diet  Time      N  Mean\n  <fct> <fct> <int> <dbl>\n1 1     0        20  41.4\n2 1     2        20  47.2\n3 1     4        19  56.5\n# … with 45 more rows\n\n\nFor each distinct combination of Diet and Time, the chick weight data is summarized into the number of observations (N) and the mean (Mean) of weight.\nFurther summaries: Let’s also calculate the standard deviation, median, minimum and maximum values but only at days 0 and 21.\n\nsumCW <-  CW %>% \n  dplyr::filter(Time %in% c(0, 21)) %>% \n  dplyr::group_by(Diet, Time) %>% \n  dplyr::summarise(N = n(),\n            Mean = mean(weight),\n            SD = sd(weight),\n            Median = median(weight),\n            Min = min(weight),\n            Max = max(weight)) %>% \n  dplyr::arrange(Diet, Time)\n\n`summarise()` has grouped output by 'Diet'. You can override using the\n`.groups` argument.\n\nsumCW\n\n# A tibble: 8 × 8\n# Groups:   Diet [4]\n  Diet  Time      N  Mean     SD Median   Min   Max\n  <fct> <fct> <int> <dbl>  <dbl>  <dbl> <dbl> <dbl>\n1 1     0        20  41.4  0.995   41      39    43\n2 1     21       16 178.  58.7    166      96   305\n3 2     0        10  40.7  1.49    40.5    39    43\n# … with 5 more rows\n\n\nLet’s make the summaries “prettier”, say, for a report or publication.\n\nlibrary(\"knitr\") # to use the kable() function\nprettySumCW <- sumCW %>% \n dplyr::mutate(`Mean (SD)` = str_c(format(Mean, digits=1),\n           \" (\", format(SD, digits=2), \")\")) %>% \n dplyr::mutate(Range = str_c(Min, \" - \", Max)) %>% \n dplyr::select(Diet, Time, N, `Mean (SD)`, Median, Range) %>%\n dplyr::arrange(Diet, Time) %>% \n kable(format = \"latex\")\nprettySumCW\n\n\n\n\n\n \n  \n    Diet \n    Time \n    N \n    Mean (SD) \n    Median \n    Range \n  \n \n\n  \n    1 \n    0 \n    20 \n    41 ( 0.99) \n    41.0 \n    39 - 43 \n  \n  \n    1 \n    21 \n    16 \n    178 (58.70) \n    166.0 \n    96 - 305 \n  \n  \n    2 \n    0 \n    10 \n    41 ( 1.5) \n    40.5 \n    39 - 43 \n  \n  \n    2 \n    21 \n    10 \n    215 (78.1) \n    212.5 \n    74 - 331 \n  \n  \n    3 \n    0 \n    10 \n    41 ( 1) \n    41.0 \n    39 - 42 \n  \n  \n    3 \n    21 \n    10 \n    270 (72) \n    281.0 \n    147 - 373 \n  \n  \n    4 \n    0 \n    10 \n    41 ( 1.1) \n    41.0 \n    39 - 42 \n  \n  \n    4 \n    21 \n    9 \n    239 (43.3) \n    237.0 \n    196 - 322 \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nInterpretation: This summary table offers the same interpretation as before, namely that diet 3 has the highest mean and median weights at day 21 but a higher variation than group 4. However it should be noted that at day 21, diet 1 lost 4 chicks from 20 that started and diet 4 lost 1 from 10. This could be a sign of some health related issues."
  },
  {
    "objectID": "Ch2_RLab.html#further-links",
    "href": "Ch2_RLab.html#further-links",
    "title": "1  Introduction to R",
    "section": "1.8 Further Links",
    "text": "1.8 Further Links\n\n1.8.1 Further R-Intros\n\nhttps://eddelbuettel.github.io/gsir-te/Getting-Started-in-R.pdf\nhttps://www.datacamp.com/courses/free-introduction-to-r\nhttps://swcarpentry.github.io/r-novice-gapminder/\nhttps://support.rstudio.com/hc/en-us/articles/200526207-Using-Projects\n\n\n\n1.8.2 Version Control (Git/GitHub)\n\nhttps://support.rstudio.com/hc/en-us/articles/200532077-Version-Control-with-Git-and-SVN\nhttp://happygitwithr.com/\nhttps://www.gitkraken.com/\n\n\n\n1.8.3 R-Ladies\n\nhttps://rladies.org/"
  },
  {
    "objectID": "Ch2_Exercises.html#e-xercise-8",
    "href": "Ch2_Exercises.html#e-xercise-8",
    "title": "2  Exercise 7:",
    "section": "2.1 E xercise 8:",
    "text": "2.1 E xercise 8:\nThis exercise relates to the College data set, which can be found in the file College.csv. It contains a number of variables for \\(777\\) different universities and colleges in the US. The variables are:\n\nPrivate : Public/private indicator\nApps : Number of applications received\nAccept : Number of applicants accepted\nEnroll : Number of new students enrolled\nTop10perc : New students from top 10% of high school class\nTop25perc : New students from top 25% of high school class\nF.Undergrad : Number of full-time undergraduates\nP.Undergrad : Number of part-time undergraduates\nOutstate : Out-of-state tuition\nRoom.Board : Room and board costs\nBooks : Estimated book costs\nPersonal : Estimated personal spending\nPhD : Percent of faculty with Ph.D.’s\nTerminal : Percent of faculty with terminal degree\nS.F.Ratio : Student/faculty ratio\nperc.alumni : Percent of alumni who donate\nExpend : Instructional expenditure per student\nGrad.Rate : Graduation rate\n\n8. a) Use the read.csv() function to read the data into R. Call the loaded data college. Make sure that you have the directory set to the correct location for the data.\nAnswer:\n\n# Store data into dataframe college\ncollege <- read.csv(\"DATA/College.csv\")\n\n# Print first 10 rows and 5 collumns of the data\nprint(college[c(1:10),c(1:5)])\n\n                              X Private Apps Accept Enroll\n1  Abilene Christian University     Yes 1660   1232    721\n2            Adelphi University     Yes 2186   1924    512\n3                Adrian College     Yes 1428   1097    336\n4           Agnes Scott College     Yes  417    349    137\n5     Alaska Pacific University     Yes  193    146     55\n6             Albertson College     Yes  587    479    158\n7       Albertus Magnus College     Yes  353    340    103\n8                Albion College     Yes 1899   1720    489\n9              Albright College     Yes 1038    839    227\n10    Alderson-Broaddus College     Yes  582    498    172\n\n\n8. b) Look at the data using the fix() function.\nAnswer:\nYou should notice that the first column is just the name of each university. We don’t really want R to treat this as data. However, it may be handy to have these names for later. Try the following commands:\n\n# Store row names\nrownames(college) <- college[,1]\n\n# pops up a window for data visualization\n# fix(college)\n\nYou should see that there is now a row.names column with the name of each university recorded. This means that R has given each row a name corresponding to the appropriate university. R will not try to perform calculations on the row names. However, we still need to eliminate the first column in the data where the names are stored. Try:\n\n# Eliminates first column (containing the row names)\ncollege <- college[,-1]\n# fix(college)\n\nNow you should see that the first data column is Private. Note that another column labeled row.names now appears before the Private column. However, this is not a data column but rather the name that R is giving to each row.\n8. c. i) Use the summary() function to produce a numerical summary of the variables in the data set.\nAnswer:\n\nsummary(college[, 1:5])\n\n   Private               Apps           Accept          Enroll    \n Length:777         Min.   :   81   Min.   :   72   Min.   :  35  \n Class :character   1st Qu.:  776   1st Qu.:  604   1st Qu.: 242  \n Mode  :character   Median : 1558   Median : 1110   Median : 434  \n                    Mean   : 3002   Mean   : 2019   Mean   : 780  \n                    3rd Qu.: 3624   3rd Qu.: 2424   3rd Qu.: 902  \n                    Max.   :48094   Max.   :26330   Max.   :6392  \n   Top10perc    \n Min.   : 1.00  \n 1st Qu.:15.00  \n Median :23.00  \n Mean   :27.56  \n 3rd Qu.:35.00  \n Max.   :96.00  \n\n\n8. c. ii) Use the pairs() function to produce a scatterplot matrix of the 2nd to 10th column or variables of the data. Recall that you can reference the 2nd to 10th column of a matrix A using A[,2:10].\nAnswer:\n\npairs(x = college[,2:10])\n\n\n\n\n8. c. iii) Use the boxplot() function to produce side-by-side boxplots of Outstate versus Private.\nAnswer:\n\nboxplot(Outstate~Private, \n        data = college, \n        xlab = \"Private\", \n        ylab = \"Outstate\")\n\n\n\n\n8. c. iv) Create a new qualitative variable, called Elite, by binning the Top10perc variable. We are going to divide universities into two groups based on whether or not the proportion of students coming from the top 10% of their high school classes exceeds 50%.\n\n# Creating a vector called ELite with only \"No\" entrances amounting the number of college rows\nElite <- rep(\"No\",nrow(college))\n\n# Replacing \"No\" with \"Yes\" if the proportion of students coming from the top 10% of their HS classes exceeds 50%.\nElite[college$Top10perc > 50] <- \"Yes\"\n\n# Encode a vector as a factor\nElite <- as.factor(Elite)\n\n# Add Elite variable to our current dataset \"college\"\ncollege <- data.frame(college, Elite)\n\nUse the summary() function to see how many elite universities there are. Now use the boxplot() function to produce side-by-side boxplots of Outstate versus Elite.\nAnswer:\n\nsummary(college$Elite)\n\n No Yes \n699  78 \n\n\nThere are \\(78\\) elite Universities. The boxplots of Outstate versus Elite-Status are generated as following:\n\nboxplot(Outstate ~ Elite, \n        data = college, xlab=\"Elite\", ylab=\"Outstate\")\n\n\n\n\n8. c. v) Use the hist() function to produce some histograms with differing numbers of bins for a few of the quantitative variables. You may find the command par(mfrow=c(2,2)) useful: it will divide the print window into four regions so that four plots can be made simultaneously. Modifying the arguments to this function will divide the screen in other ways.\nAnswer:\n\npar(mfrow=c(2,2))\nhist(college$Apps,     breaks=50, xlim=c(0,25000), \n     main=\"Apps\")\nhist(college$Enroll,   breaks=25, main=\"Enroll\")\nhist(college$Expend,   breaks=25, main=\"Expend\")\nhist(college$Outstate, main=\"Outstate\")\n\n\n\npar(mfrow=c(1,1))"
  },
  {
    "objectID": "Ch2_Exercises.html#e-xercise-9",
    "href": "Ch2_Exercises.html#e-xercise-9",
    "title": "2  Exercise 7:",
    "section": "2.2 E xercise 9:",
    "text": "2.2 E xercise 9:\nThis exercise involves the Auto data set. Make sure that the missing values have been removed from the data.\n\n# Store data into dataframe college\nAuto <- read.csv(\"DATA/Auto.csv\", header=T, na.strings=\"?\")\n\n# Remove missing values from the data\nAuto <- na.omit(Auto)\n\n# Print first 10 rows of the data\nprint(Auto[c(1:10),])\n\n   mpg cylinders displacement horsepower weight acceleration year origin\n1   18         8          307        130   3504         12.0   70      1\n2   15         8          350        165   3693         11.5   70      1\n3   18         8          318        150   3436         11.0   70      1\n4   16         8          304        150   3433         12.0   70      1\n5   17         8          302        140   3449         10.5   70      1\n6   15         8          429        198   4341         10.0   70      1\n7   14         8          454        220   4354          9.0   70      1\n8   14         8          440        215   4312          8.5   70      1\n9   14         8          455        225   4425         10.0   70      1\n10  15         8          390        190   3850          8.5   70      1\n                        name\n1  chevrolet chevelle malibu\n2          buick skylark 320\n3         plymouth satellite\n4              amc rebel sst\n5                ford torino\n6           ford galaxie 500\n7           chevrolet impala\n8          plymouth fury iii\n9           pontiac catalina\n10        amc ambassador dpl\n\n# Find more info on the variables here: https://rstudio-pubs-static.s3.amazonaws.com/61800_faea93548c6b49cc91cd0c5ef5059894.html\n\n9. a) Which of the predictors are quantitative, and which are qualitative?\nAnswer:\n\n# Summarize dataset\nsummary(Auto)\n\n      mpg          cylinders      displacement     horsepower        weight    \n Min.   : 9.00   Min.   :3.000   Min.   : 68.0   Min.   : 46.0   Min.   :1613  \n 1st Qu.:17.00   1st Qu.:4.000   1st Qu.:105.0   1st Qu.: 75.0   1st Qu.:2225  \n Median :22.75   Median :4.000   Median :151.0   Median : 93.5   Median :2804  \n Mean   :23.45   Mean   :5.472   Mean   :194.4   Mean   :104.5   Mean   :2978  \n 3rd Qu.:29.00   3rd Qu.:8.000   3rd Qu.:275.8   3rd Qu.:126.0   3rd Qu.:3615  \n Max.   :46.60   Max.   :8.000   Max.   :455.0   Max.   :230.0   Max.   :5140  \n  acceleration        year           origin          name          \n Min.   : 8.00   Min.   :70.00   Min.   :1.000   Length:392        \n 1st Qu.:13.78   1st Qu.:73.00   1st Qu.:1.000   Class :character  \n Median :15.50   Median :76.00   Median :1.000   Mode  :character  \n Mean   :15.54   Mean   :75.98   Mean   :1.577                     \n 3rd Qu.:17.02   3rd Qu.:79.00   3rd Qu.:2.000                     \n Max.   :24.80   Max.   :82.00   Max.   :3.000                     \n\n\n\nQuantitative predictors: mpg, cylinders, displacement, horsepower, weight, acceleration, year\nQualitative predictors: name, origin\n\n9. b) What is the range of each quantitative predictor? You can answer this using the range() function.\nAnswer:\n\n# apply the range function to the first seven columns of Auto\nc <- sapply(Auto[, 1:7], range)\n# print to console\nc\n\n      mpg cylinders displacement horsepower weight acceleration year\n[1,]  9.0         3           68         46   1613          8.0   70\n[2,] 46.6         8          455        230   5140         24.8   82\n\n\n9. c) What is the mean and standard deviation of each quantitative predictor?\nAnswer:\n\n# compute mean for the first seven variables and store it in a vector\nmean <- sapply(Auto[,1:7], mean)\n\n# round the values inside the vectors to 2 decimal cases\nmean <- sapply(mean,round,2)\n\n# compute the standard deviation and round it up \nsd <- sapply(Auto[, 1:7], sd)\nsd <- sapply(sd,round,2)\n\n# print both vectors\nmean\n\n         mpg    cylinders displacement   horsepower       weight acceleration \n       23.45         5.47       194.41       104.47      2977.58        15.54 \n        year \n       75.98 \n\nsd\n\n         mpg    cylinders displacement   horsepower       weight acceleration \n        7.81         1.71       104.64        38.49       849.40         2.76 \n        year \n        3.68 \n\n\n9.d) Now remove the 10th through 85th observations. What is the range, mean, and standard deviation of each predictor in the subset of the data that remains?\nAnswer:\n\n# remove observations and store them \nnewAuto = Auto[-(10:85),]\n\n# Re-do exercises 9. b) and 9.c)\n# This time, create an empty Matrix \"Results\" to store the results\nResults <- matrix(NA, nrow = 4, ncol = 7, \n                  dimnames = list(c(\"Mean\", \"SD\", \"Minimum\", \"Maximum\"), \n                                  c(colnames(newAuto[,1:7]))))\n\n# Store the results\nResults[1,] <- sapply(newAuto[, 1:7], mean)\nResults[2,] <- sapply(newAuto[, 1:7], sd)  # Standard Deviation\nResults[3,] <- sapply(newAuto[, 1:7], min)\nResults[4,] <- sapply(newAuto[, 1:7], max)\n\n# Round them\nResults[] <- sapply(Results[],round,2)\n\n# Print the results\n# Results\nprint(Results[,1:6])\n\n          mpg cylinders displacement horsepower  weight acceleration\nMean    24.40      5.37       187.24     100.72 2935.97        15.73\nSD       7.87      1.65        99.68      35.71  811.30         2.69\nMinimum 11.00      3.00        68.00      46.00 1649.00         8.50\nMaximum 46.60      8.00       455.00     230.00 4997.00        24.80\n\n\n9. e) Using the full data set, investigate the predictors graphically, using scatterplots or other tools of your choice. Create some plots highlighting the relationships among the predictors. Comment on your findings.\nAnswer:\n\npairs(Auto[, -9])\n\n\n\n\n\nheavier weight is related with lower mpg and with higher horsepower;\nhigher horsepower correlates with lower acceleration;\nmpg (miles per gallon) mostly increases for newer model years meaning that cars become more efficient over time.\n\n9. f) Suppose that we wish to predict gas mileage (mpg) on the basis of the other variables. Do your plots suggest that any of the other variables might be useful in predicting mpg? Justify your answer.\nAnswer:\nYes. On the one hand, as we can see from the plot above, all of the quantitative variables show some sort of relation (either linear or non-linear) with mpg and hence, they might be useful in predicting mpg. The origin qualitative variable might also be useful in predicting mpg, with cars originated from region 3 being associated with higher mpg. On the other hand, the name predictor has too little observations per name though, so using this as a predictor is likely to result in overfitting the data and will not generalize well."
  },
  {
    "objectID": "Ch2_RLab.html#exercise-7",
    "href": "Ch2_RLab.html#exercise-7",
    "title": "1  Introduction to R",
    "section": "1.10 Exercise 7:",
    "text": "1.10 Exercise 7:\nThe table below provides a training data set containing six observations, three predictors, and one qualitative response variable. Suppose we wish to use this data set to make a prediction for \\(Y\\) when \\(X_1 = X_2 = X_3 = 0\\) using K-nearest neighbors.\n\n\n\nObs.\n\\(X_1\\)\n\\(X_2\\)\n\\(X_3\\)\n\\(Y\\)\n\n\n\n\n1\n0\n3\n0\nRed\n\n\n2\n2\n0\n0\nRed\n\n\n3\n0\n1\n3\nRed\n\n\n4\n0\n1\n2\nGreen\n\n\n5\n−1\n0\n1\nGreen\n\n\n6\n1\n1\n1\nRed\n\n\n\n7. a) Compute the Euclidean distance between each observation and the test point, \\(X_1 = X_2 = X_3 = 0\\).\nAnswer: ::: {.cell}\n# Observations\nobs1 <- c( 0, 3, 0)\nobs2 <- c( 2, 0, 0)\nobs3 <- c( 0, 1, 3)\nobs4 <- c( 0, 1, 2)\nobs5 <- c(-1, 0, 1)\nobs6 <- c( 1, 1, 1)\n\n# Test Point\nobs0 <- c(0, 0, 0)\n\n# Create a Vector Dist_vec to store the results\nDist <- numeric(length = 6)\n\n# Compute and store the Euclidean distances\nDist[1] <- (dist1 <- sqrt(sum((obs1-obs0)^2)) )\nDist[2] <- (dist2 <- sqrt(sum((obs2-obs0)^2)) )\nDist[3] <- (dist3 <- sqrt(sum((obs3-obs0)^2)) )\nDist[4] <- (dist4 <- sqrt(sum((obs4-obs0)^2)) )\nDist[5] <- (dist5 <- sqrt(sum((obs5-obs0)^2)) )\nDist[6] <- (dist6 <- sqrt(sum((obs6-obs0)^2)) )\n\n# Print the results\nDist\n\n[1] 3.000000 2.000000 3.162278 2.236068 1.414214 1.732051\n\n:::\n7. b) What is your prediction with \\(K = 1\\)? Why?\nAnswer: ::: {.cell}\nwhich.min(Dist)\n\n[1] 5\n\n:::\nClosest 1 neighbor is obs5 and thus, our prediction is Green because Green is the \\(Y\\) value associated to obs5.\n7. c) What is your prediction with \\(K = 3\\)? Why?\nAnswer: ::: {.cell}\norder(Dist)[1:3]\n\n[1] 5 6 2\n\n:::\nClosest 3 neighbors are obs5, obs6, obs2 and thus, our prediction is Red because it is the \\(Y\\) value associated to obs2 and obs6 (majority rule).\n7. d) If the Bayes decision boundary in this problem is highly nonlinear, then would we expect the best value for \\(K\\) to be large or small? Why?\nAnswer:\nA large value of K means that the \\(Y\\)-values from a large neighborhood are contributing to the prediction at one chosen \\(X\\)-point. This requires that the neighborhood consists of relatively similar \\(Y\\)-values. However, in the case of a highly nonlinear decision boundary, the neighborhoods of similar \\(Y\\)-values become generally small. Therefore, also \\(K\\) must be chosen relatively small so that we can capture more of the non-linear decision boundary."
  },
  {
    "objectID": "Ch2_RLab.html#e-xercise-8",
    "href": "Ch2_RLab.html#e-xercise-8",
    "title": "1  Introduction to R",
    "section": "1.10 E xercise 8:",
    "text": "1.10 E xercise 8:\nThis exercise relates to the College data set, which can be found in the file College.csv. It contains a number of variables for \\(777\\) different universities and colleges in the US. The variables are:\n\nPrivate : Public/private indicator\nApps : Number of applications received\nAccept : Number of applicants accepted\nEnroll : Number of new students enrolled\nTop10perc : New students from top 10% of high school class\nTop25perc : New students from top 25% of high school class\nF.Undergrad : Number of full-time undergraduates\nP.Undergrad : Number of part-time undergraduates\nOutstate : Out-of-state tuition\nRoom.Board : Room and board costs\nBooks : Estimated book costs\nPersonal : Estimated personal spending\nPhD : Percent of faculty with Ph.D.’s\nTerminal : Percent of faculty with terminal degree\nS.F.Ratio : Student/faculty ratio\nperc.alumni : Percent of alumni who donate\nExpend : Instructional expenditure per student\nGrad.Rate : Graduation rate\n\n8. a) Use the read.csv() function to read the data into R. Call the loaded data college. Make sure that you have the directory set to the correct location for the data.\nAnswer:\n\n# Store data into dataframe college\ncollege <- read.csv(\"DATA/College.csv\")\n\n# Print first 10 rows and 5 collumns of the data\nprint(college[c(1:10),c(1:5)])\n\n                              X Private Apps Accept Enroll\n1  Abilene Christian University     Yes 1660   1232    721\n2            Adelphi University     Yes 2186   1924    512\n3                Adrian College     Yes 1428   1097    336\n4           Agnes Scott College     Yes  417    349    137\n5     Alaska Pacific University     Yes  193    146     55\n6             Albertson College     Yes  587    479    158\n7       Albertus Magnus College     Yes  353    340    103\n8                Albion College     Yes 1899   1720    489\n9              Albright College     Yes 1038    839    227\n10    Alderson-Broaddus College     Yes  582    498    172\n\n\n8. b) Look at the data using the fix() function.\nAnswer:\nYou should notice that the first column is just the name of each university. We don’t really want R to treat this as data. However, it may be handy to have these names for later. Try the following commands:\n\n# Store row names\nrownames(college) <- college[,1]\n\n# pops up a window for data visualization\n# fix(college)\n\nYou should see that there is now a row.names column with the name of each university recorded. This means that R has given each row a name corresponding to the appropriate university. R will not try to perform calculations on the row names. However, we still need to eliminate the first column in the data where the names are stored. Try:\n\n# Eliminates first column (containing the row names)\ncollege <- college[,-1]\n# fix(college)\n\nNow you should see that the first data column is Private. Note that another column labeled row.names now appears before the Private column. However, this is not a data column but rather the name that R is giving to each row.\n8. c. i) Use the summary() function to produce a numerical summary of the variables in the data set.\nAnswer:\n\nsummary(college[, 1:5])\n\n   Private               Apps           Accept          Enroll    \n Length:777         Min.   :   81   Min.   :   72   Min.   :  35  \n Class :character   1st Qu.:  776   1st Qu.:  604   1st Qu.: 242  \n Mode  :character   Median : 1558   Median : 1110   Median : 434  \n                    Mean   : 3002   Mean   : 2019   Mean   : 780  \n                    3rd Qu.: 3624   3rd Qu.: 2424   3rd Qu.: 902  \n                    Max.   :48094   Max.   :26330   Max.   :6392  \n   Top10perc    \n Min.   : 1.00  \n 1st Qu.:15.00  \n Median :23.00  \n Mean   :27.56  \n 3rd Qu.:35.00  \n Max.   :96.00  \n\n\n8. c. ii) Use the pairs() function to produce a scatterplot matrix of the 2nd to 10th column or variables of the data. Recall that you can reference the 2nd to 10th column of a matrix A using A[,2:10].\nAnswer:\n\npairs(x = college[,2:10])\n\n\n\n\n8. c. iii) Use the boxplot() function to produce side-by-side boxplots of Outstate versus Private.\nAnswer:\n\nboxplot(Outstate~Private, \n        data = college, \n        xlab = \"Private\", \n        ylab = \"Outstate\")\n\n\n\n\n8. c. iv) Create a new qualitative variable, called Elite, by binning the Top10perc variable. We are going to divide universities into two groups based on whether or not the proportion of students coming from the top 10% of their high school classes exceeds 50%.\n\n# Creating a vector called ELite with only \"No\" entrances amounting the number of college rows\nElite <- rep(\"No\",nrow(college))\n\n# Replacing \"No\" with \"Yes\" if the proportion of students coming from the top 10% of their HS classes exceeds 50%.\nElite[college$Top10perc > 50] <- \"Yes\"\n\n# Encode a vector as a factor\nElite <- as.factor(Elite)\n\n# Add Elite variable to our current dataset \"college\"\ncollege <- data.frame(college, Elite)\n\nUse the summary() function to see how many elite universities there are. Now use the boxplot() function to produce side-by-side boxplots of Outstate versus Elite.\nAnswer:\n\nsummary(college$Elite)\n\n No Yes \n699  78 \n\n\nThere are \\(78\\) elite Universities. The boxplots of Outstate versus Elite-Status are generated as following:\n\nboxplot(Outstate ~ Elite, \n        data = college, xlab=\"Elite\", ylab=\"Outstate\")\n\n\n\n\n8. c. v) Use the hist() function to produce some histograms with differing numbers of bins for a few of the quantitative variables. You may find the command par(mfrow=c(2,2)) useful: it will divide the print window into four regions so that four plots can be made simultaneously. Modifying the arguments to this function will divide the screen in other ways.\nAnswer:\n\npar(mfrow=c(2,2))\nhist(college$Apps,     breaks=50, xlim=c(0,25000), \n     main=\"Apps\")\nhist(college$Enroll,   breaks=25, main=\"Enroll\")\nhist(college$Expend,   breaks=25, main=\"Expend\")\nhist(college$Outstate, main=\"Outstate\")\n\n\n\npar(mfrow=c(1,1))"
  },
  {
    "objectID": "Ch2_RLab.html#e-xercise-9",
    "href": "Ch2_RLab.html#e-xercise-9",
    "title": "1  Introduction to R",
    "section": "1.11 E xercise 9:",
    "text": "1.11 E xercise 9:\nThis exercise involves the Auto data set. Make sure that the missing values have been removed from the data.\n\n# Store data into dataframe college\nAuto <- read.csv(\"DATA/Auto.csv\", header=T, na.strings=\"?\")\n\n# Remove missing values from the data\nAuto <- na.omit(Auto)\n\n# Print first 10 rows of the data\nprint(Auto[c(1:10),])\n\n   mpg cylinders displacement horsepower weight acceleration year origin\n1   18         8          307        130   3504         12.0   70      1\n2   15         8          350        165   3693         11.5   70      1\n3   18         8          318        150   3436         11.0   70      1\n4   16         8          304        150   3433         12.0   70      1\n5   17         8          302        140   3449         10.5   70      1\n6   15         8          429        198   4341         10.0   70      1\n7   14         8          454        220   4354          9.0   70      1\n8   14         8          440        215   4312          8.5   70      1\n9   14         8          455        225   4425         10.0   70      1\n10  15         8          390        190   3850          8.5   70      1\n                        name\n1  chevrolet chevelle malibu\n2          buick skylark 320\n3         plymouth satellite\n4              amc rebel sst\n5                ford torino\n6           ford galaxie 500\n7           chevrolet impala\n8          plymouth fury iii\n9           pontiac catalina\n10        amc ambassador dpl\n\n# Find more info on the variables here: https://rstudio-pubs-static.s3.amazonaws.com/61800_faea93548c6b49cc91cd0c5ef5059894.html\n\n9. a) Which of the predictors are quantitative, and which are qualitative?\nAnswer:\n\n# Summarize dataset\nsummary(Auto)\n\n      mpg          cylinders      displacement     horsepower        weight    \n Min.   : 9.00   Min.   :3.000   Min.   : 68.0   Min.   : 46.0   Min.   :1613  \n 1st Qu.:17.00   1st Qu.:4.000   1st Qu.:105.0   1st Qu.: 75.0   1st Qu.:2225  \n Median :22.75   Median :4.000   Median :151.0   Median : 93.5   Median :2804  \n Mean   :23.45   Mean   :5.472   Mean   :194.4   Mean   :104.5   Mean   :2978  \n 3rd Qu.:29.00   3rd Qu.:8.000   3rd Qu.:275.8   3rd Qu.:126.0   3rd Qu.:3615  \n Max.   :46.60   Max.   :8.000   Max.   :455.0   Max.   :230.0   Max.   :5140  \n  acceleration        year           origin          name          \n Min.   : 8.00   Min.   :70.00   Min.   :1.000   Length:392        \n 1st Qu.:13.78   1st Qu.:73.00   1st Qu.:1.000   Class :character  \n Median :15.50   Median :76.00   Median :1.000   Mode  :character  \n Mean   :15.54   Mean   :75.98   Mean   :1.577                     \n 3rd Qu.:17.02   3rd Qu.:79.00   3rd Qu.:2.000                     \n Max.   :24.80   Max.   :82.00   Max.   :3.000                     \n\n\n\nQuantitative predictors: mpg, cylinders, displacement, horsepower, weight, acceleration, year\nQualitative predictors: name, origin\n\n9. b) What is the range of each quantitative predictor? You can answer this using the range() function.\nAnswer:\n\n# apply the range function to the first seven columns of Auto\nc <- sapply(Auto[, 1:7], range)\n# print to console\nc\n\n      mpg cylinders displacement horsepower weight acceleration year\n[1,]  9.0         3           68         46   1613          8.0   70\n[2,] 46.6         8          455        230   5140         24.8   82\n\n\n9. c) What is the mean and standard deviation of each quantitative predictor?\nAnswer:\n\n# compute mean for the first seven variables and store it in a vector\nmean <- sapply(Auto[,1:7], mean)\n\n# round the values inside the vectors to 2 decimal cases\nmean <- sapply(mean,round,2)\n\n# compute the standard deviation and round it up \nsd <- sapply(Auto[, 1:7], sd)\nsd <- sapply(sd,round,2)\n\n# print both vectors\nmean\n\n         mpg    cylinders displacement   horsepower       weight acceleration \n       23.45         5.47       194.41       104.47      2977.58        15.54 \n        year \n       75.98 \n\nsd\n\n         mpg    cylinders displacement   horsepower       weight acceleration \n        7.81         1.71       104.64        38.49       849.40         2.76 \n        year \n        3.68 \n\n\n9.d) Now remove the 10th through 85th observations. What is the range, mean, and standard deviation of each predictor in the subset of the data that remains?\nAnswer:\n\n# remove observations and store them \nnewAuto = Auto[-(10:85),]\n\n# Re-do exercises 9. b) and 9.c)\n# This time, create an empty Matrix \"Results\" to store the results\nResults <- matrix(NA, nrow = 4, ncol = 7, \n                  dimnames = list(c(\"Mean\", \"SD\", \"Minimum\", \"Maximum\"), \n                                  c(colnames(newAuto[,1:7]))))\n\n# Store the results\nResults[1,] <- sapply(newAuto[, 1:7], mean)\nResults[2,] <- sapply(newAuto[, 1:7], sd)  # Standard Deviation\nResults[3,] <- sapply(newAuto[, 1:7], min)\nResults[4,] <- sapply(newAuto[, 1:7], max)\n\n# Round them\nResults[] <- sapply(Results[],round,2)\n\n# Print the results\n# Results\nprint(Results[,1:6])\n\n          mpg cylinders displacement horsepower  weight acceleration\nMean    24.40      5.37       187.24     100.72 2935.97        15.73\nSD       7.87      1.65        99.68      35.71  811.30         2.69\nMinimum 11.00      3.00        68.00      46.00 1649.00         8.50\nMaximum 46.60      8.00       455.00     230.00 4997.00        24.80\n\n\n9. e) Using the full data set, investigate the predictors graphically, using scatterplots or other tools of your choice. Create some plots highlighting the relationships among the predictors. Comment on your findings.\nAnswer:\n\npairs(Auto[, -9])\n\n\n\n\n\nheavier weight is related with lower mpg and with higher horsepower;\nhigher horsepower correlates with lower acceleration;\nmpg (miles per gallon) mostly increases for newer model years meaning that cars become more efficient over time.\n\n9. f) Suppose that we wish to predict gas mileage (mpg) on the basis of the other variables. Do your plots suggest that any of the other variables might be useful in predicting mpg? Justify your answer.\nAnswer:\nYes. On the one hand, as we can see from the plot above, all of the quantitative variables show some sort of relation (either linear or non-linear) with mpg and hence, they might be useful in predicting mpg. The origin qualitative variable might also be useful in predicting mpg, with cars originated from region 3 being associated with higher mpg. On the other hand, the name predictor has too little observations per name though, so using this as a predictor is likely to result in overfitting the data and will not generalize well."
  },
  {
    "objectID": "Ch2_RLab.html#exercise-8",
    "href": "Ch2_RLab.html#exercise-8",
    "title": "1  Introduction to R",
    "section": "1.11 Exercise 8:",
    "text": "1.11 Exercise 8:\nThis exercise relates to the College data set, which can be found in the file College.csv. It contains a number of variables for \\(777\\) different universities and colleges in the US. The variables are:\n\nPrivate : Public/private indicator\nApps : Number of applications received\nAccept : Number of applicants accepted\nEnroll : Number of new students enrolled\nTop10perc : New students from top 10% of high school class\nTop25perc : New students from top 25% of high school class\nF.Undergrad : Number of full-time undergraduates\nP.Undergrad : Number of part-time undergraduates\nOutstate : Out-of-state tuition\nRoom.Board : Room and board costs\nBooks : Estimated book costs\nPersonal : Estimated personal spending\nPhD : Percent of faculty with Ph.D.’s\nTerminal : Percent of faculty with terminal degree\nS.F.Ratio : Student/faculty ratio\nperc.alumni : Percent of alumni who donate\nExpend : Instructional expenditure per student\nGrad.Rate : Graduation rate\n\n8. a) Use the read.csv() function to read the data into R. Call the loaded data college. Make sure that you have the directory set to the correct location for the data.\nAnswer:\n\n# Store data into dataframe college\ncollege <- read.csv(\"DATA/College.csv\")\n\n# Print first 10 rows and 5 collumns of the data\nprint(college[c(1:10),c(1:5)])\n\n                              X Private Apps Accept Enroll\n1  Abilene Christian University     Yes 1660   1232    721\n2            Adelphi University     Yes 2186   1924    512\n3                Adrian College     Yes 1428   1097    336\n4           Agnes Scott College     Yes  417    349    137\n5     Alaska Pacific University     Yes  193    146     55\n6             Albertson College     Yes  587    479    158\n7       Albertus Magnus College     Yes  353    340    103\n8                Albion College     Yes 1899   1720    489\n9              Albright College     Yes 1038    839    227\n10    Alderson-Broaddus College     Yes  582    498    172\n\n\n8. b) Look at the data using the fix() function.\nAnswer:\nYou should notice that the first column is just the name of each university. We don’t really want R to treat this as data. However, it may be handy to have these names for later. Try the following commands:\n\n# Store row names\nrownames(college) <- college[,1]\n\n# pops up a window for data visualization\n# fix(college)\n\nYou should see that there is now a row.names column with the name of each university recorded. This means that R has given each row a name corresponding to the appropriate university. R will not try to perform calculations on the row names. However, we still need to eliminate the first column in the data where the names are stored. Try:\n\n# Eliminates first column (containing the row names)\ncollege <- college[,-1]\n# fix(college)\n\nNow you should see that the first data column is Private. Note that another column labeled row.names now appears before the Private column. However, this is not a data column but rather the name that R is giving to each row.\n8. c. i) Use the summary() function to produce a numerical summary of the variables in the data set.\nAnswer:\n\nsummary(college[, 1:5])\n\n   Private               Apps           Accept          Enroll    \n Length:777         Min.   :   81   Min.   :   72   Min.   :  35  \n Class :character   1st Qu.:  776   1st Qu.:  604   1st Qu.: 242  \n Mode  :character   Median : 1558   Median : 1110   Median : 434  \n                    Mean   : 3002   Mean   : 2019   Mean   : 780  \n                    3rd Qu.: 3624   3rd Qu.: 2424   3rd Qu.: 902  \n                    Max.   :48094   Max.   :26330   Max.   :6392  \n   Top10perc    \n Min.   : 1.00  \n 1st Qu.:15.00  \n Median :23.00  \n Mean   :27.56  \n 3rd Qu.:35.00  \n Max.   :96.00  \n\n\n8. c. ii) Use the pairs() function to produce a scatterplot matrix of the 2nd to 10th column or variables of the data. Recall that you can reference the 2nd to 10th column of a matrix A using A[,2:10].\nAnswer:\n\npairs(x = college[,2:10])\n\n\n\n\n8. c. iii) Use the boxplot() function to produce side-by-side boxplots of Outstate versus Private.\nAnswer:\n\nboxplot(Outstate~Private, \n        data = college, \n        xlab = \"Private\", \n        ylab = \"Outstate\")\n\n\n\n\n8. c. iv) Create a new qualitative variable, called Elite, by binning the Top10perc variable. We are going to divide universities into two groups based on whether or not the proportion of students coming from the top 10% of their high school classes exceeds 50%.\n\n# Creating a vector called ELite with only \"No\" entrances amounting the number of college rows\nElite <- rep(\"No\",nrow(college))\n\n# Replacing \"No\" with \"Yes\" if the proportion of students coming from the top 10% of their HS classes exceeds 50%.\nElite[college$Top10perc > 50] <- \"Yes\"\n\n# Encode a vector as a factor\nElite <- as.factor(Elite)\n\n# Add Elite variable to our current dataset \"college\"\ncollege <- data.frame(college, Elite)\n\nUse the summary() function to see how many elite universities there are. Now use the boxplot() function to produce side-by-side boxplots of Outstate versus Elite.\nAnswer:\n\nsummary(college$Elite)\n\n No Yes \n699  78 \n\n\nThere are \\(78\\) elite Universities. The boxplots of Outstate versus Elite-Status are generated as following:\n\nboxplot(Outstate ~ Elite, \n        data = college, xlab=\"Elite\", ylab=\"Outstate\")\n\n\n\n\n8. c. v) Use the hist() function to produce some histograms with differing numbers of bins for a few of the quantitative variables. You may find the command par(mfrow=c(2,2)) useful: it will divide the print window into four regions so that four plots can be made simultaneously. Modifying the arguments to this function will divide the screen in other ways.\nAnswer:\n\npar(mfrow=c(2,2))\nhist(college$Apps,     breaks=50, xlim=c(0,25000), \n     main=\"Apps\")\nhist(college$Enroll,   breaks=25, main=\"Enroll\")\nhist(college$Expend,   breaks=25, main=\"Expend\")\nhist(college$Outstate, main=\"Outstate\")\n\n\n\npar(mfrow=c(1,1))"
  },
  {
    "objectID": "Ch2_RLab.html#exercise-9",
    "href": "Ch2_RLab.html#exercise-9",
    "title": "1  Introduction to R",
    "section": "1.12 Exercise 9:",
    "text": "1.12 Exercise 9:\nThis exercise involves the Auto data set. Make sure that the missing values have been removed from the data.\n\n# Store data into dataframe college\nAuto <- read.csv(\"DATA/Auto.csv\", header=T, na.strings=\"?\")\n\n# Remove missing values from the data\nAuto <- na.omit(Auto)\n\n# Print first 10 rows of the data\nprint(Auto[c(1:10),])\n\n   mpg cylinders displacement horsepower weight acceleration year origin\n1   18         8          307        130   3504         12.0   70      1\n2   15         8          350        165   3693         11.5   70      1\n3   18         8          318        150   3436         11.0   70      1\n4   16         8          304        150   3433         12.0   70      1\n5   17         8          302        140   3449         10.5   70      1\n6   15         8          429        198   4341         10.0   70      1\n7   14         8          454        220   4354          9.0   70      1\n8   14         8          440        215   4312          8.5   70      1\n9   14         8          455        225   4425         10.0   70      1\n10  15         8          390        190   3850          8.5   70      1\n                        name\n1  chevrolet chevelle malibu\n2          buick skylark 320\n3         plymouth satellite\n4              amc rebel sst\n5                ford torino\n6           ford galaxie 500\n7           chevrolet impala\n8          plymouth fury iii\n9           pontiac catalina\n10        amc ambassador dpl\n\n# Find more info on the variables here: https://rstudio-pubs-static.s3.amazonaws.com/61800_faea93548c6b49cc91cd0c5ef5059894.html\n\n9. a) Which of the predictors are quantitative, and which are qualitative?\nAnswer:\n\n# Summarize dataset\nsummary(Auto)\n\n      mpg          cylinders      displacement     horsepower        weight    \n Min.   : 9.00   Min.   :3.000   Min.   : 68.0   Min.   : 46.0   Min.   :1613  \n 1st Qu.:17.00   1st Qu.:4.000   1st Qu.:105.0   1st Qu.: 75.0   1st Qu.:2225  \n Median :22.75   Median :4.000   Median :151.0   Median : 93.5   Median :2804  \n Mean   :23.45   Mean   :5.472   Mean   :194.4   Mean   :104.5   Mean   :2978  \n 3rd Qu.:29.00   3rd Qu.:8.000   3rd Qu.:275.8   3rd Qu.:126.0   3rd Qu.:3615  \n Max.   :46.60   Max.   :8.000   Max.   :455.0   Max.   :230.0   Max.   :5140  \n  acceleration        year           origin          name          \n Min.   : 8.00   Min.   :70.00   Min.   :1.000   Length:392        \n 1st Qu.:13.78   1st Qu.:73.00   1st Qu.:1.000   Class :character  \n Median :15.50   Median :76.00   Median :1.000   Mode  :character  \n Mean   :15.54   Mean   :75.98   Mean   :1.577                     \n 3rd Qu.:17.02   3rd Qu.:79.00   3rd Qu.:2.000                     \n Max.   :24.80   Max.   :82.00   Max.   :3.000                     \n\n\n\nQuantitative predictors: mpg, cylinders, displacement, horsepower, weight, acceleration, year\nQualitative predictors: name, origin\n\n9. b) What is the range of each quantitative predictor? You can answer this using the range() function.\nAnswer:\n\n# apply the range function to the first seven columns of Auto\nc <- sapply(Auto[, 1:7], range)\n# print to console\nc\n\n      mpg cylinders displacement horsepower weight acceleration year\n[1,]  9.0         3           68         46   1613          8.0   70\n[2,] 46.6         8          455        230   5140         24.8   82\n\n\n9. c) What is the mean and standard deviation of each quantitative predictor?\nAnswer:\n\n# compute mean for the first seven variables and store it in a vector\nmean <- sapply(Auto[,1:7], mean)\n\n# round the values inside the vectors to 2 decimal cases\nmean <- sapply(mean,round,2)\n\n# compute the standard deviation and round it up \nsd <- sapply(Auto[, 1:7], sd)\nsd <- sapply(sd,round,2)\n\n# print both vectors\nmean\n\n         mpg    cylinders displacement   horsepower       weight acceleration \n       23.45         5.47       194.41       104.47      2977.58        15.54 \n        year \n       75.98 \n\nsd\n\n         mpg    cylinders displacement   horsepower       weight acceleration \n        7.81         1.71       104.64        38.49       849.40         2.76 \n        year \n        3.68 \n\n\n9.d) Now remove the 10th through 85th observations. What is the range, mean, and standard deviation of each predictor in the subset of the data that remains?\nAnswer:\n\n# remove observations and store them \nnewAuto = Auto[-(10:85),]\n\n# Re-do exercises 9. b) and 9.c)\n# This time, create an empty Matrix \"Results\" to store the results\nResults <- matrix(NA, nrow = 4, ncol = 7, \n                  dimnames = list(c(\"Mean\", \"SD\", \"Minimum\", \"Maximum\"), \n                                  c(colnames(newAuto[,1:7]))))\n\n# Store the results\nResults[1,] <- sapply(newAuto[, 1:7], mean)\nResults[2,] <- sapply(newAuto[, 1:7], sd)  # Standard Deviation\nResults[3,] <- sapply(newAuto[, 1:7], min)\nResults[4,] <- sapply(newAuto[, 1:7], max)\n\n# Round them\nResults[] <- sapply(Results[],round,2)\n\n# Print the results\n# Results\nprint(Results[,1:6])\n\n          mpg cylinders displacement horsepower  weight acceleration\nMean    24.40      5.37       187.24     100.72 2935.97        15.73\nSD       7.87      1.65        99.68      35.71  811.30         2.69\nMinimum 11.00      3.00        68.00      46.00 1649.00         8.50\nMaximum 46.60      8.00       455.00     230.00 4997.00        24.80\n\n\n9. e) Using the full data set, investigate the predictors graphically, using scatterplots or other tools of your choice. Create some plots highlighting the relationships among the predictors. Comment on your findings.\nAnswer:\n\npairs(Auto[, -9])\n\n\n\n\n\nheavier weight is related with lower mpg and with higher horsepower;\nhigher horsepower correlates with lower acceleration;\nmpg (miles per gallon) mostly increases for newer model years meaning that cars become more efficient over time.\n\n9. f) Suppose that we wish to predict gas mileage (mpg) on the basis of the other variables. Do your plots suggest that any of the other variables might be useful in predicting mpg? Justify your answer.\nAnswer:\nYes. On the one hand, as we can see from the plot above, all of the quantitative variables show some sort of relation (either linear or non-linear) with mpg and hence, they might be useful in predicting mpg. The origin qualitative variable might also be useful in predicting mpg, with cars originated from region 3 being associated with higher mpg. On the other hand, the name predictor has too little observations per name though, so using this as a predictor is likely to result in overfitting the data and will not generalize well."
  },
  {
    "objectID": "Ch2_RLab.html#exercises",
    "href": "Ch2_RLab.html#exercises",
    "title": "1  Introduction to R",
    "section": "1.9 Exercises",
    "text": "1.9 Exercises\n\nExercise 7\nExercise 8\nExercise 9"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Computer-Aided Statistical Analysis B.Sc.",
    "section": "",
    "text": "Day \n    Time \n    Lecture Hall \n  \n \n\n  \n    Monday \n    12:15-13:45 \n    Jur / Hörsaal K \n  \n  \n    Wednesday \n    16:15-17:45 \n    Jur / Hörsaal K \n  \n\n\n\n\n\n\n\n\n\nTextbook:\n\nAn Introduction to Statistical Learning (2nd Edition), by Gareth James, Daniela Witten, Trevor Hastie, and Robert Tibshirani\nThe pdf-Version of this book can be downloaded for free: Free Book\n\n\neWhiteboard for the lecture notes.\nThis online script can be found at https://www.dliebl.com/Script-ISLR/\n\nThe above links to the lecture materials can also be found at eCampus"
  }
]